[
    {
        "input": "[struct_sep0] Show name , country , age for all singers [/struct_sep0] [struct_sep1] from France ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country ( France ), song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  singer.Country = \"France\" "
    },
    {
        "input": "[struct_sep0] Show name , country , age for all singers [/struct_sep0] [struct_sep1] above age 20 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  singer.Age > 20 "
    },
    {
        "input": "[struct_sep0] Show name , country , age for all singers [/struct_sep0] [struct_sep1] above the average age . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] Show name , country , age for all singers [/struct_sep0] [struct_sep1] who are older than average ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] Show name , country , age for all singers [/struct_sep0] [struct_sep1] who performed in a concert in 2014 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  concert.Year = 2014 "
    },
    {
        "input": "[struct_sep0] Show name , country , age for all singers [/struct_sep0] [struct_sep1] who have a song having ' Hey ' in its name ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] Show name , country , age for all singers [/struct_sep0] [struct_sep1] who has a song with the word ' Hey ' in its title ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What are the names , countries , and ages for every singer [/struct_sep0] [struct_sep1] from France ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country ( France ), song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  singer.Country = \"France\" "
    },
    {
        "input": "[struct_sep0] What are the names , countries , and ages for every singer [/struct_sep0] [struct_sep1] above age 20 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  singer.Age > 20 "
    },
    {
        "input": "[struct_sep0] What are the names , countries , and ages for every singer [/struct_sep0] [struct_sep1] above the average age . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What are the names , countries , and ages for every singer [/struct_sep0] [struct_sep1] who are older than average ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What are the names , countries , and ages for every singer [/struct_sep0] [struct_sep1] who performed in a concert in 2014 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  concert.Year = 2014 "
    },
    {
        "input": "[struct_sep0] What are the names , countries , and ages for every singer [/struct_sep0] [struct_sep1] who have a song having ' Hey ' in its name ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What are the names , countries , and ages for every singer [/struct_sep0] [struct_sep1] who has a song with the word ' Hey ' in its title ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country , singer.Age from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What is the average , minimum , and maximum age of all singers [/struct_sep0] [struct_sep1] above age 20 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select avg ( singer.Age )  , min ( singer.Age )  , max ( singer.Age )  from stadium  where  singer.Age > 20 "
    },
    {
        "input": "[struct_sep0] What is the average , minimum , and maximum age of all singers [/struct_sep0] [struct_sep1] above the average age . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select avg ( singer.Age )  , min ( singer.Age )  , max ( singer.Age )  from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What is the average , minimum , and maximum age of all singers [/struct_sep0] [struct_sep1] who are older than average ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select avg ( singer.Age )  , min ( singer.Age )  , max ( singer.Age )  from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What is the average , minimum , and maximum age of all singers [/struct_sep0] [struct_sep1] who performed in a concert in 2014 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select avg ( singer.Age )  , min ( singer.Age )  , max ( singer.Age )  from stadium  where  concert.Year = 2014 "
    },
    {
        "input": "[struct_sep0] What is the average , minimum , and maximum age of all singers [/struct_sep0] [struct_sep1] who have a song having ' Hey ' in its name ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select avg ( singer.Age )  , min ( singer.Age )  , max ( singer.Age )  from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What is the average , minimum , and maximum age of all singers [/struct_sep0] [struct_sep1] who has a song with the word ' Hey ' in its title ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select avg ( singer.Age )  , min ( singer.Age )  , max ( singer.Age )  from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What are all distinct countries [/struct_sep0] [struct_sep1] in descending order of age ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What are the different countries with singers [/struct_sep0] [struct_sep1] ordered by age from the oldest to the youngest . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What are the different countries with singers [/struct_sep0] [struct_sep1] in descending order of age ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What are the different countries with singers [/struct_sep0] [struct_sep1] from France ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country ( France ), song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  where  singer.Country = \"France\" "
    },
    {
        "input": "[struct_sep0] What are the different countries with singers [/struct_sep0] [struct_sep1] above the average age . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What are the different countries with singers [/struct_sep0] [struct_sep1] who are older than average ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What are the different countries with singers [/struct_sep0] [struct_sep1] who performed in a concert in 2014 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  where  concert.Year = 2014 "
    },
    {
        "input": "[struct_sep0] What are the different countries with singers [/struct_sep0] [struct_sep1] who have a song having ' Hey ' in its name ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What are the different countries with singers [/struct_sep0] [struct_sep1] who has a song with the word ' Hey ' in its title ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select  distinct singer.Country from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] List all song names by singers [/struct_sep0] [struct_sep1] ordered by age from the oldest to the youngest . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] List all song names by singers [/struct_sep0] [struct_sep1] in descending order of age ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] List all song names by singers [/struct_sep0] [struct_sep1] from France ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country ( France ), song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  singer.Country = \"France\" "
    },
    {
        "input": "[struct_sep0] List all song names by singers [/struct_sep0] [struct_sep1] above age 20 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  singer.Age > 20 "
    },
    {
        "input": "[struct_sep0] List all song names by singers [/struct_sep0] [struct_sep1] who performed in a concert in 2014 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  concert.Year = 2014 "
    },
    {
        "input": "[struct_sep0] List all song names by singers [/struct_sep0] [struct_sep1] who have a song having ' Hey ' in its name ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] List all song names by singers [/struct_sep0] [struct_sep1] who has a song with the word ' Hey ' in its title ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What are all the song names by singers [/struct_sep0] [struct_sep1] ordered by age from the oldest to the youngest . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What are all the song names by singers [/struct_sep0] [struct_sep1] in descending order of age ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What are all the song names by singers [/struct_sep0] [struct_sep1] from France ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country ( France ), song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  singer.Country = \"France\" "
    },
    {
        "input": "[struct_sep0] What are all the song names by singers [/struct_sep0] [struct_sep1] above age 20 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  singer.Age > 20 "
    },
    {
        "input": "[struct_sep0] What are all the song names by singers [/struct_sep0] [struct_sep1] who performed in a concert in 2014 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  concert.Year = 2014 "
    },
    {
        "input": "[struct_sep0] What are all the song names by singers [/struct_sep0] [struct_sep1] who have a song having ' Hey ' in its name ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What are all the song names by singers [/struct_sep0] [struct_sep1] who has a song with the word ' Hey ' in its title ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Song_Name from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] Show location and name for all stadiums [/struct_sep0] [struct_sep1] with highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Location , stadium.Name from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] Show location and name for all stadiums [/struct_sep0] [struct_sep1] with the highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Location , stadium.Name from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] Show location and name for all stadiums [/struct_sep0] [struct_sep1] without any concerts ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Location , stadium.Name from stadium  where  @.@ not in concert.* "
    },
    {
        "input": "[struct_sep0] Show location and name for all stadiums [/struct_sep0] [struct_sep1] which some concerts happened in the years of both 2014 and 2015 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Location , stadium.Name from stadium  where  concert.Year = 2014  and  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] Show location and name for all stadiums [/struct_sep0] [struct_sep1] that had concerts that occurred in both 2014 and 2015 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Location , stadium.Name from stadium  where  concert.Year = 2014  and  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] What are the locations and names of all stations [/struct_sep0] [struct_sep1] with highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Location , stadium.Name from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the locations and names of all stations [/struct_sep0] [struct_sep1] with the highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Location , stadium.Name from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] with a capacity between 5000 and 10000 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] with capacity between 5000 and 10000 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] without any concerts ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  @.@ not in concert.* "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] which some concerts happened in the years of both 2014 and 2015 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  concert.Year = 2014  and  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] that had concerts that occurred in both 2014 and 2015 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  concert.Year = 2014  and  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] with a capacity between 5000 and 10000 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] with capacity between 5000 and 10000 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] without any concerts ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  @.@ not in concert.* "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] which some concerts happened in the years of both 2014 and 2015 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  concert.Year = 2014  and  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] What is the name and capacity for the stadium [/struct_sep0] [struct_sep1] that had concerts that occurred in both 2014 and 2015 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  concert.Year = 2014  and  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] Show the stadium name and capacity [/struct_sep0] [struct_sep1] with most number of concerts [/struct_sep1] [struct_sep2] after 2013 ? [/struct_sep2] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  concert.Year > 2013  group by stadium.Stadium_ID  order by count ( concert.* )  desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the stadium name and capacity [/struct_sep0] [struct_sep1] with most number of concerts [/struct_sep1] [struct_sep2] in 2014 ? [/struct_sep2] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  concert.Year = 2014  group by stadium.Stadium_ID  order by count ( concert.* )  desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name and capacity of the stadium [/struct_sep0] [struct_sep1] with the most concerts [/struct_sep1] [struct_sep2] in year 2014 . [/struct_sep2] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  concert.Year = 2014  group by stadium.Stadium_ID  order by count ( concert.* )  desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name and capacity of the stadium [/struct_sep0] [struct_sep1] with the most concerts [/struct_sep1] [struct_sep2] in 2014 ? [/struct_sep2] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Capacity from stadium  where  concert.Year = 2014  group by stadium.Stadium_ID  order by count ( concert.* )  desc limit 1"
    },
    {
        "input": "[struct_sep0] Which year [/struct_sep0] [struct_sep1] in year 2014 or 2015 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select concert.Year from stadium  where  concert.Year = 2014  or  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] What is the year [/struct_sep0] [struct_sep1] in year 2014 or 2015 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select concert.Year from stadium  where  concert.Year = 2014  or  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] Show the stadium names [/struct_sep0] [struct_sep1] with a capacity between 5000 and 10000 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] Show the stadium names [/struct_sep0] [struct_sep1] with capacity between 5000 and 10000 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] Show the stadium names [/struct_sep0] [struct_sep1] with highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the stadium names [/struct_sep0] [struct_sep1] with the highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the stadiums [/struct_sep0] [struct_sep1] with a capacity between 5000 and 10000 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] What are the names of the stadiums [/struct_sep0] [struct_sep1] with capacity between 5000 and 10000 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] What are the names of the stadiums [/struct_sep0] [struct_sep1] with highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the stadiums [/struct_sep0] [struct_sep1] with the highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the stadiums [/struct_sep0] [struct_sep1] which some concerts happened in the years of both 2014 and 2015 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  where  concert.Year = 2014  and  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] What are the names of the stadiums [/struct_sep0] [struct_sep1] that had concerts that occurred in both 2014 and 2015 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  where  concert.Year = 2014  and  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] Show countries [/struct_sep0] [struct_sep1] where a singer above age 40 and [/struct_sep1] [struct_sep2] in descending order of age ? [/struct_sep2] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Country from stadium  where  singer.Age > 40  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] Show names for all stadiums [/struct_sep0] [struct_sep1] except for stadiums having a concert [/struct_sep1] [struct_sep2] in year 2014 or after . [/struct_sep2] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  where  except_  @.@ is concert.*  and  concert.Year >= 2014 "
    },
    {
        "input": "[struct_sep0] What are the names of all stadiums [/struct_sep0] [struct_sep1] that did not have a concert [/struct_sep1] [struct_sep2] in year 2014 or after . [/struct_sep2] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name from stadium  where  except_  @.@ is concert.*  and  concert.Year >= 2014 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] ordered by age from the oldest to the youngest . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] in descending order of age ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] from France ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country ( France ), song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name from stadium  where  singer.Country = \"France\" "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] above age 20 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name from stadium  where  singer.Age > 20 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] above the average age . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] who are older than average ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] who have a song having ' Hey ' in its name ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] who has a song with the word ' Hey ' in its title ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name from stadium  where  singer.Song_Name like \"%Hey%\" "
    },
    {
        "input": "[struct_sep0] what is the name and nation of the singer [/struct_sep0] [struct_sep1] ordered by age from the oldest to the youngest . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] what is the name and nation of the singer [/struct_sep0] [struct_sep1] in descending order of age ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] what is the name and nation of the singer [/struct_sep0] [struct_sep1] from France ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country ( France ), song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  singer.Country = \"France\" "
    },
    {
        "input": "[struct_sep0] what is the name and nation of the singer [/struct_sep0] [struct_sep1] above age 20 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  singer.Age > 20 "
    },
    {
        "input": "[struct_sep0] what is the name and nation of the singer [/struct_sep0] [struct_sep1] above the average age . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] what is the name and nation of the singer [/struct_sep0] [struct_sep1] who are older than average ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] what is the name and nation of the singer [/struct_sep0] [struct_sep1] who performed in a concert in 2014 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  concert.Year = 2014 "
    },
    {
        "input": "[struct_sep0] What is the name and country of origin of every singer [/struct_sep0] [struct_sep1] ordered by age from the oldest to the youngest . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What is the name and country of origin of every singer [/struct_sep0] [struct_sep1] in descending order of age ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  order by singer.Age desc"
    },
    {
        "input": "[struct_sep0] What is the name and country of origin of every singer [/struct_sep0] [struct_sep1] from France ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country ( France ), song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  singer.Country = \"France\" "
    },
    {
        "input": "[struct_sep0] What is the name and country of origin of every singer [/struct_sep0] [struct_sep1] above age 20 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  singer.Age > 20 "
    },
    {
        "input": "[struct_sep0] What is the name and country of origin of every singer [/struct_sep0] [struct_sep1] above the average age . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What is the name and country of origin of every singer [/struct_sep0] [struct_sep1] who are older than average ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  @.@ > avg ( singer.Age )  "
    },
    {
        "input": "[struct_sep0] What is the name and country of origin of every singer [/struct_sep0] [struct_sep1] who performed in a concert in 2014 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select singer.Name , singer.Country from stadium  where  concert.Year = 2014 "
    },
    {
        "input": "[struct_sep0] Find the name and location of the stadiums [/struct_sep0] [struct_sep1] with a capacity between 5000 and 10000 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Location from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] Find the name and location of the stadiums [/struct_sep0] [struct_sep1] with highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Location from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name and location of the stadiums [/struct_sep0] [struct_sep1] with the highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Location from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name and location of the stadiums [/struct_sep0] [struct_sep1] without any concerts ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Location from stadium  where  @.@ not in concert.* "
    },
    {
        "input": "[struct_sep0] What are the names and locations of the stadiums [/struct_sep0] [struct_sep1] with a capacity between 5000 and 10000 . [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Location from stadium  where  stadium.Capacity between 5000 and 10000 "
    },
    {
        "input": "[struct_sep0] What are the names and locations of the stadiums [/struct_sep0] [struct_sep1] with highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Location from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and locations of the stadiums [/struct_sep0] [struct_sep1] with the highest average attendance ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Location from stadium  order by stadium.Average desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and locations of the stadiums [/struct_sep0] [struct_sep1] without any concerts ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select stadium.Name , stadium.Location from stadium  where  @.@ not in concert.* "
    },
    {
        "input": "[struct_sep0] What are the number of concerts [/struct_sep0] [struct_sep1] occurred in 2014 or 2015 ? [/struct_sep1] | concert _ singer | stadium : stadium _ id, location, name, capacity, highest, lowest, average | singer : singer _ id, name, country, song _ name, song _ release _ year, age, is _ male | concert : concert _ id, concert _ name, theme, stadium _ id, year | singer _ in _ concert : concert _ id, singer _ id",
        "gold_natsql": "select count ( concert.* )  from stadium  where  concert.Year = 2014  or  concert.Year = 2015 "
    },
    {
        "input": "[struct_sep0] Find the number of pets [/struct_sep0] [struct_sep1] that are raised by female students ( with sex F ) . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  student.Sex = \"F\" "
    },
    {
        "input": "[struct_sep0] Find the number of pets [/struct_sep0] [struct_sep1] are raised by female students ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  student.Sex = \"F\" "
    },
    {
        "input": "[struct_sep0] Find the number of pets [/struct_sep0] [struct_sep1] whose age is older than 1 . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.pet_age > 1 "
    },
    {
        "input": "[struct_sep0] Find the number of pets [/struct_sep0] [struct_sep1] who is older than 1 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.pet_age > 1 "
    },
    {
        "input": "[struct_sep0] How many pets [/struct_sep0] [struct_sep1] that are raised by female students ( with sex F ) . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  student.Sex = \"F\" "
    },
    {
        "input": "[struct_sep0] How many pets [/struct_sep0] [struct_sep1] are raised by female students ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  student.Sex = \"F\" "
    },
    {
        "input": "[struct_sep0] How many pets [/struct_sep0] [struct_sep1] whose age is older than 1 . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.pet_age > 1 "
    },
    {
        "input": "[struct_sep0] How many pets [/struct_sep0] [struct_sep1] who is older than 1 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.pet_age > 1 "
    },
    {
        "input": "[struct_sep0] How many pets are owned by students [/struct_sep0] [struct_sep1] whose last name is ' Smith ' . [/struct_sep1] | pets _ 1 | student : stuid, lname ( Smith ), fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( has_pet.* )  from student  where  student.LName = \"Smith\" "
    },
    {
        "input": "[struct_sep0] How many pets are owned by students [/struct_sep0] [struct_sep1] whose last name is ' Smith ' ? [/struct_sep1] | pets _ 1 | student : stuid, lname ( Smith ), fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select count ( has_pet.* )  from student  where  student.LName = \"Smith\" "
    },
    {
        "input": "[struct_sep0] Find the number of dog pets [/struct_sep0] [struct_sep1] whose weight is heavier than 10 . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( dog ), pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.PetType = \"dog\"  and  pets.weight > 10 "
    },
    {
        "input": "[struct_sep0] Find the number of dog pets [/struct_sep0] [struct_sep1] have a greater weight than 10 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( dog ), pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.PetType = \"dog\"  and  pets.weight > 10 "
    },
    {
        "input": "[struct_sep0] Find the number of dog pets [/struct_sep0] [struct_sep1] whose age is older than 1 . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( dog ), pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.PetType = \"dog\"  and  pets.pet_age > 1 "
    },
    {
        "input": "[struct_sep0] Find the number of dog pets [/struct_sep0] [struct_sep1] who is older than 1 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( dog ), pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.PetType = \"dog\"  and  pets.pet_age > 1 "
    },
    {
        "input": "[struct_sep0] How many dog pets [/struct_sep0] [struct_sep1] whose weight is heavier than 10 . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( dog ), pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.PetType = \"dog\"  and  pets.weight > 10 "
    },
    {
        "input": "[struct_sep0] How many dog pets [/struct_sep0] [struct_sep1] have a greater weight than 10 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( dog ), pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.PetType = \"dog\"  and  pets.weight > 10 "
    },
    {
        "input": "[struct_sep0] How many dog pets [/struct_sep0] [struct_sep1] whose age is older than 1 . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( dog ), pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.PetType = \"dog\"  and  pets.pet_age > 1 "
    },
    {
        "input": "[struct_sep0] How many dog pets [/struct_sep0] [struct_sep1] who is older than 1 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( dog ), pet _ age, weight",
        "gold_natsql": "select count ( pets.* )  from student  where  pets.PetType = \"dog\"  and  pets.pet_age > 1 "
    },
    {
        "input": "[struct_sep0] Find the first name of students [/struct_sep0] [struct_sep1] who do not have any pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select  distinct student.Fname from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] Find the first name of students [/struct_sep0] [struct_sep1] who do not own any pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select  distinct student.Fname from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] What are the first names of every student [/struct_sep0] [struct_sep1] who do not have any pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select  distinct student.Fname from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] What are the first names of every student [/struct_sep0] [struct_sep1] who do not own any pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select  distinct student.Fname from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] Find the first name of students [/struct_sep0] [struct_sep1] who do not have any pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.Fname from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] Find the first name of students [/struct_sep0] [struct_sep1] who do not own any pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.Fname from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] Find the id of students [/struct_sep0] [struct_sep1] who do not have any pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.StuID from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] Find the id of students [/struct_sep0] [struct_sep1] who do not own any pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.StuID from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] What are the ids of the students [/struct_sep0] [struct_sep1] who do not have any pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.StuID from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] What are the ids of the students [/struct_sep0] [struct_sep1] who do not own any pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.StuID from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] Find the id and weight of all pets [/struct_sep0] [struct_sep1] whose weight is heavier than 10 . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select pets.PetID , pets.weight from student  where  pets.weight > 10 "
    },
    {
        "input": "[struct_sep0] Find the id and weight of all pets [/struct_sep0] [struct_sep1] have a greater weight than 10 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select pets.PetID , pets.weight from student  where  pets.weight > 10 "
    },
    {
        "input": "[struct_sep0] Find the id and weight of all pets [/struct_sep0] [struct_sep1] that are raised by female students ( with sex F ) . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select pets.PetID , pets.weight from student  where  student.Sex = \"F\" "
    },
    {
        "input": "[struct_sep0] Find the id and weight of all pets [/struct_sep0] [struct_sep1] are raised by female students ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select pets.PetID , pets.weight from student  where  student.Sex = \"F\" "
    },
    {
        "input": "[struct_sep0] What is the id and weight of every pet [/struct_sep0] [struct_sep1] whose weight is heavier than 10 . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select pets.PetID , pets.weight from student  where  pets.weight > 10 "
    },
    {
        "input": "[struct_sep0] What is the id and weight of every pet [/struct_sep0] [struct_sep1] have a greater weight than 10 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select pets.PetID , pets.weight from student  where  pets.weight > 10 "
    },
    {
        "input": "[struct_sep0] What is the id and weight of every pet [/struct_sep0] [struct_sep1] that are raised by female students ( with sex F ) . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select pets.PetID , pets.weight from student  where  student.Sex = \"F\" "
    },
    {
        "input": "[struct_sep0] What is the id and weight of every pet [/struct_sep0] [struct_sep1] are raised by female students ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select pets.PetID , pets.weight from student  where  student.Sex = \"F\" "
    },
    {
        "input": "[struct_sep0] Find the id of the pet owned by student [/struct_sep0] [struct_sep1] that have an age greater than 20 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select has_pet.PetID from student  where  student.Age > 20 "
    },
    {
        "input": "[struct_sep0] What is the id of the pet owned by the student [/struct_sep0] [struct_sep1] that have an age greater than 20 ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select has_pet.PetID from student  where  student.Age > 20 "
    },
    {
        "input": "[struct_sep0] Find the first name and gender of student [/struct_sep0] [struct_sep1] who have cat or dog pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  pets.PetType = \"cat\"  or  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] Find the first name and gender of student [/struct_sep0] [struct_sep1] who has a cat or dog as a pet ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  pets.PetType = \"cat\"  or  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] Find the first name and gender of student [/struct_sep0] [struct_sep1] who have both cat and dog pets . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  pets.PetType = \"cat\"  and  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] Find the first name and gender of student [/struct_sep0] [struct_sep1] who do not have a cat pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  @.@ not in student.*  and  pets.PetType = \"cat\" "
    },
    {
        "input": "[struct_sep0] Find the first name and gender of student [/struct_sep0] [struct_sep1] who do not have a cat pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  except_  @.@ is pets.*  and  pets.PetType = \"cat\" "
    },
    {
        "input": "[struct_sep0] Find the first name and gender of student [/struct_sep0] [struct_sep1] who do not own cat as pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  except_  @.@ is pets.*  and  pets.PetType = \"cat\" "
    },
    {
        "input": "[struct_sep0] Find the first name and gender of student [/struct_sep0] [struct_sep1] who do not have any pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] Find the first name and gender of student [/struct_sep0] [struct_sep1] who do not own any pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] What is the first name and gender of the all the students [/struct_sep0] [struct_sep1] who have cat or dog pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  pets.PetType = \"cat\"  or  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] What is the first name and gender of the all the students [/struct_sep0] [struct_sep1] who has a cat or dog as a pet ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  pets.PetType = \"cat\"  or  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] What is the first name and gender of the all the students [/struct_sep0] [struct_sep1] who have both cat and dog pets . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  pets.PetType = \"cat\"  and  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] What is the first name and gender of the all the students [/struct_sep0] [struct_sep1] who do not have a cat pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  @.@ not in student.*  and  pets.PetType = \"cat\" "
    },
    {
        "input": "[struct_sep0] What is the first name and gender of the all the students [/struct_sep0] [struct_sep1] who do not have a cat pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  except_  @.@ is pets.*  and  pets.PetType = \"cat\" "
    },
    {
        "input": "[struct_sep0] What is the first name and gender of the all the students [/struct_sep0] [struct_sep1] who do not own cat as pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat ), pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  except_  @.@ is pets.*  and  pets.PetType = \"cat\" "
    },
    {
        "input": "[struct_sep0] What is the first name and gender of the all the students [/struct_sep0] [struct_sep1] who do not have any pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] What is the first name and gender of the all the students [/struct_sep0] [struct_sep1] who do not own any pets ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype, pet _ age, weight",
        "gold_natsql": "select student.Fname , student.Sex from student  where  @.@ not in student.*  and  @.@ join has_pet.* "
    },
    {
        "input": "[struct_sep0] Find the average age of students [/struct_sep0] [struct_sep1] who have cat or dog pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select avg ( student.Age )  from student  where  pets.PetType = \"cat\"  or  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] Find the average age of students [/struct_sep0] [struct_sep1] who has a cat or dog as a pet ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select avg ( student.Age )  from student  where  pets.PetType = \"cat\"  or  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] Find the average age of students [/struct_sep0] [struct_sep1] who have both cat and dog pets . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select avg ( student.Age )  from student  where  pets.PetType = \"cat\"  and  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] What is the average age for all students [/struct_sep0] [struct_sep1] who have cat or dog pet . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select avg ( student.Age )  from student  where  pets.PetType = \"cat\"  or  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] What is the average age for all students [/struct_sep0] [struct_sep1] who has a cat or dog as a pet ? [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select avg ( student.Age )  from student  where  pets.PetType = \"cat\"  or  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] What is the average age for all students [/struct_sep0] [struct_sep1] who have both cat and dog pets . [/struct_sep1] | pets _ 1 | student : stuid, lname, fname, age, sex, major, advisor, city _ code | has _ pet : stuid, petid | pets : petid, pettype ( cat, dog ), pet _ age, weight",
        "gold_natsql": "select avg ( student.Age )  from student  where  pets.PetType = \"cat\"  and  pets.PetType = \"dog\" "
    },
    {
        "input": "[struct_sep0] Which model of the car [/struct_sep0] [struct_sep1] whose weight is below the average weight . [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_names.Model from continents  where  @.@ < avg ( cars_data.Weight )  "
    },
    {
        "input": "[struct_sep0] Which model of the car [/struct_sep0] [struct_sep1] with a weight smaller than the average ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_names.Model from continents  where  @.@ < avg ( cars_data.Weight )  "
    },
    {
        "input": "[struct_sep0] What is the model of the car [/struct_sep0] [struct_sep1] whose weight is below the average weight . [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_names.Model from continents  where  @.@ < avg ( cars_data.Weight )  "
    },
    {
        "input": "[struct_sep0] What is the model of the car [/struct_sep0] [struct_sep1] with a weight smaller than the average ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_names.Model from continents  where  @.@ < avg ( cars_data.Weight )  "
    },
    {
        "input": "[struct_sep0] Find the name of the makers [/struct_sep0] [struct_sep1] are there in france ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( france ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct car_makers.Maker from continents  where  countries.CountryName = \"france\" "
    },
    {
        "input": "[struct_sep0] What is the name of the different car makers [/struct_sep0] [struct_sep1] are there in france ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( france ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct car_makers.Maker from continents  where  countries.CountryName = \"france\" "
    },
    {
        "input": "[struct_sep0] Which distinct car models [/struct_sep0] [struct_sep1] are produced in the usa ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( usa ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct model_list.Model from continents  where  countries.CountryName = \"usa\" "
    },
    {
        "input": "[struct_sep0] Which distinct car models [/struct_sep0] [struct_sep1] produced in the usa ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( usa ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct model_list.Model from continents  where  countries.CountryName = \"usa\" "
    },
    {
        "input": "[struct_sep0] Which distinct car models [/struct_sep0] [struct_sep1] were produced by the maker with full name American Motor Company ? [/struct_sep1] | car _ 1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent | car _ makers : id, maker, fullname ( American Motor Company ), country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct model_list.Model from continents  where  car_makers.FullName = \"American Motor Company\" "
    },
    {
        "input": "[struct_sep0] Which distinct car models [/struct_sep0] [struct_sep1] created by the car maker American Motor Company ? [/struct_sep1] | car _ 1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent | car _ makers : id, maker, fullname ( American Motor Company ), country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct model_list.Model from continents  where  car_makers.FullName = \"American Motor Company\" "
    },
    {
        "input": "[struct_sep0] What is the name of the country [/struct_sep0] [struct_sep1] with at least 3 manufacturers ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName from continents  where  count ( car_makers.* )  >= 3  group by countries.CountryName "
    },
    {
        "input": "[struct_sep0] What is the name of the country [/struct_sep0] [struct_sep1] where there is not a single car maker ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName from continents  where  except_  @.@ is car_makers.* "
    },
    {
        "input": "[struct_sep0] What is the name of the country [/struct_sep0] [struct_sep1] with no car makers ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName from continents  where  except_  @.@ is car_makers.* "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with the largest accelerate ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with the greatest accelerate ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with the least accelerate have ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  order by cars_data.Accelerate asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] with the largest horsepower ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the accelerate of the car [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Accelerate from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] How many car makers [/struct_sep0] [struct_sep1] that produced some cars in the year of 1970 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( car_makers.* )  from continents  where  cars_data.Year = \"1970\" "
    },
    {
        "input": "[struct_sep0] How many car makers [/struct_sep0] [struct_sep1] who produced a car in 1970 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( car_makers.* )  from continents  where  cars_data.Year = \"1970\" "
    },
    {
        "input": "[struct_sep0] How many car models [/struct_sep0] [struct_sep1] are the produced after 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  cars_data.Year > 1980 "
    },
    {
        "input": "[struct_sep0] How many car models [/struct_sep0] [struct_sep1] were produced by the maker with full name American Motor Company ? [/struct_sep1] | car _ 1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent | car _ makers : id, maker, fullname ( American Motor Company ), country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  car_makers.FullName = \"American Motor Company\" "
    },
    {
        "input": "[struct_sep0] How many car models [/struct_sep0] [struct_sep1] created by the car maker American Motor Company ? [/struct_sep1] | car _ 1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent | car _ makers : id, maker, fullname ( American Motor Company ), country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  car_makers.FullName = \"American Motor Company\" "
    },
    {
        "input": "[struct_sep0] What is the count of the car models [/struct_sep0] [struct_sep1] are the produced after 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  cars_data.Year > 1980 "
    },
    {
        "input": "[struct_sep0] What is the count of the car models [/struct_sep0] [struct_sep1] were produced by the maker with full name American Motor Company ? [/struct_sep1] | car _ 1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent | car _ makers : id, maker, fullname ( American Motor Company ), country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  car_makers.FullName = \"American Motor Company\" "
    },
    {
        "input": "[struct_sep0] What is the count of the car models [/struct_sep0] [struct_sep1] created by the car maker American Motor Company ? [/struct_sep1] | car _ 1 | continents : contid, continent ( america ) | countries : countryid, countryname, continent | car _ makers : id, maker, fullname ( American Motor Company ), country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  car_makers.FullName = \"American Motor Company\" "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon ( mpg ) of the cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the average miles per gallon of all the cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.MPG )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders = 4  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders = 4  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Horsepower > 150  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Horsepower > 150  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] produced before 1980 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Year < 1980  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] have more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders > 4  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders > 4  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] were produced in 1980 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Year = 1980  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] weighing no less than 3000 and no more than 4000 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Weight > 3000  and  cars_data.Weight < 4000  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with the largest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with the greatest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] does the version with least accelerate have ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Accelerate asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with the largest horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] with the most horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] has over 6 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders > 6  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the smallest weight of the car [/struct_sep0] [struct_sep1] produced with 8 cylinders [/struct_sep1] [struct_sep2] or produced before 1980 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  or  cars_data.Year < 1980  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders = 4  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders = 4  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Horsepower > 150  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Horsepower > 150  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] before 1980 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Year < 1980  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders > 4  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] weighing no less than 3000 and no more than 4000 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  and  cars_data.Weight > 3000  and  cars_data.Weight < 4000  order by cars_data.Weight asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with the largest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with the greatest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with the largest horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the minimum weight of the car [/struct_sep0] [struct_sep1] with 8 cylinders produced [/struct_sep1] [struct_sep2] with the most horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Weight from continents  where  cars_data.Cylinders = 8  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and ids of all countries [/struct_sep0] [struct_sep1] has more than 2 car makers ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName , countries.CountryId from continents  where  count ( car_makers.* )  > 2  group by countries.CountryId "
    },
    {
        "input": "[struct_sep0] What are the names and ids of all countries [/struct_sep0] [struct_sep1] with more than 2 car makers ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName , countries.CountryId from continents  where  count ( car_makers.* )  > 2  group by countries.CountryId "
    },
    {
        "input": "[struct_sep0] What are the names and ids of all countries [/struct_sep0] [struct_sep1] where there is not a single car maker ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName , countries.CountryId from continents  where  except_  @.@ is car_makers.* "
    },
    {
        "input": "[struct_sep0] What are the names and ids of all countries [/struct_sep0] [struct_sep1] with no car makers ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName , countries.CountryId from continents  where  except_  @.@ is car_makers.* "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of the cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower of the cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the average horsepower for all cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select avg ( cars_data.Horsepower )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] Which model [/struct_sep0] [struct_sep1] with a weight smaller than the average ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_names.Model from continents  where  @.@ < avg ( cars_data.Weight )  "
    },
    {
        "input": "[struct_sep0] What model [/struct_sep0] [struct_sep1] with a weight smaller than the average ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_names.Model from continents  where  @.@ < avg ( cars_data.Weight )  "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] how many cars [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] How many car models [/struct_sep0] [struct_sep1] are the produced after 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  cars_data.Year > 1980 "
    },
    {
        "input": "[struct_sep0] How many car models [/struct_sep0] [struct_sep1] are produced in the usa ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( usa ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  countries.CountryName = \"usa\" "
    },
    {
        "input": "[struct_sep0] How many car models [/struct_sep0] [struct_sep1] produced in the usa ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( usa ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  countries.CountryName = \"usa\" "
    },
    {
        "input": "[struct_sep0] What is the number of car models [/struct_sep0] [struct_sep1] are the produced after 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  cars_data.Year > 1980 "
    },
    {
        "input": "[struct_sep0] What is the number of car models [/struct_sep0] [struct_sep1] are produced in the usa ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( usa ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  countries.CountryName = \"usa\" "
    },
    {
        "input": "[struct_sep0] What is the number of car models [/struct_sep0] [struct_sep1] produced in the usa ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( usa ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( model_list.* )  from continents  where  countries.CountryName = \"usa\" "
    },
    {
        "input": "[struct_sep0] What are the names and ids of all makers [/struct_sep0] [struct_sep1] that produced some cars in the year of 1970 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_makers.FullName , car_makers.Id from continents  where  cars_data.Year = \"1970\" "
    },
    {
        "input": "[struct_sep0] What are the names and ids of all makers [/struct_sep0] [struct_sep1] who produced a car in 1970 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_makers.FullName , car_makers.Id from continents  where  cars_data.Year = \"1970\" "
    },
    {
        "input": "[struct_sep0] What are the names and ids of all makers [/struct_sep0] [struct_sep1] are there in france ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname ( france ), continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select car_makers.FullName , car_makers.Id from continents  where  countries.CountryName = \"france\" "
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] on 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] in 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with the largest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with the greatest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with the largest horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] In which years [/struct_sep0] [struct_sep1] cars were produced [/struct_sep1] [struct_sep2] with the most horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  and  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  and  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] on 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  and  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] in 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  and  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  and  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  and  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  and  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with the largest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with the greatest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with the largest horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the different years in which there were cars produced [/struct_sep0] [struct_sep1] that weighed less than 4000 and [/struct_sep1] [struct_sep2] with the most horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select  distinct cars_data.Year from continents  where  cars_data.Weight < 4000  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with the least accelerate have ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  order by cars_data.Accelerate asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with the largest horsepower ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with the most horsepower ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with the least accelerate have ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  order by cars_data.Accelerate asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with the largest horsepower ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] with the most horsepower ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the horsepower of the car [/struct_sep0] [struct_sep1] has over 6 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Horsepower from continents  where  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] make amc hornet sportabout (sw) ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo, amc ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo, amc ) | car _ names : makeid, model ( volvo, amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] before 1980 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] produced before 1980 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] have more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] were produced in 1980 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] with the largest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] with the greatest accelerate ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  order by cars_data.Accelerate desc limit 1"
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] with the largest horsepower ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  order by cars_data.Horsepower desc limit 1"
    },
    {
        "input": "[struct_sep0] For model volvo , [/struct_sep0] [struct_sep1] how many cylinders does the car [/struct_sep1] [struct_sep2] has over 6 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Cylinders > 6 "
    },
    {
        "input": "[struct_sep0] For a volvo model , [/struct_sep0] [struct_sep1] how many cylinders [/struct_sep1] [struct_sep2] on 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  and  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] For a volvo model , [/struct_sep0] [struct_sep1] how many cylinders [/struct_sep1] [struct_sep2] or produced before 1980 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( volvo ), fullname ( Volvo ), country | model _ list : modelid, maker, model ( volvo ) | car _ names : makeid, model ( volvo ), make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.Cylinders from continents  where  car_names.Model = \"volvo\"  or  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] have a larger accelerate than the car [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] have a larger accelerate than the car [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] have a larger accelerate than the car [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] have a larger accelerate than the car [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] have a larger accelerate than the car [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with a greater accelerate than the one [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with a greater accelerate than the one [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with a greater accelerate than the one [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with a greater accelerate than the one [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] What is the number of cars [/struct_sep0] [struct_sep1] with a greater accelerate than the one [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  @.@ > cars_data.Accelerate  and  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] with at least one car maker ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( countries.* )  from continents  where  count ( car_makers.* )  >= 1  group by countries.CountryId "
    },
    {
        "input": "[struct_sep0] What is the number of countries [/struct_sep0] [struct_sep1] with at least one car maker ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( countries.* )  from continents  where  count ( car_makers.* )  >= 1  group by countries.CountryId "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] make amc hornet sportabout (sw) ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker ( amc ), fullname, country | model _ list : modelid, maker, model ( amc ) | car _ names : makeid, model ( amc ), make ( amc hornet, amc hornet sportabout (sw) ) | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  car_names.Make = \"amc hornet sportabout (sw)\" "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders = 4 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] on 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] in 1974 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1974 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with horsepower more than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with a horsepower greater than 150 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Horsepower > 150 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] produced before 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year < 1980 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] have more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] with more than 4 cylinders ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Cylinders > 4 "
    },
    {
        "input": "[struct_sep0] How many cars [/struct_sep0] [struct_sep1] were produced in 1980 ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select count ( cars_data.* )  from continents  where  cars_data.Year = 1980 "
    },
    {
        "input": "[struct_sep0] What is the maximum miles per gallon of the car [/struct_sep0] [struct_sep1] with 8 cylinders [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders = 4  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum miles per gallon of the car [/struct_sep0] [struct_sep1] with 8 cylinders [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders = 4  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum miles per gallon of the car [/struct_sep0] [struct_sep1] with 8 cylinders [/struct_sep1] [struct_sep2] on 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  and  cars_data.Year = 1974  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum miles per gallon of the car [/struct_sep0] [struct_sep1] with 8 cylinders [/struct_sep1] [struct_sep2] in 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  and  cars_data.Year = 1974  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum miles per gallon of the car [/struct_sep0] [struct_sep1] with 8 cylinders [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  and  cars_data.Horsepower > 150  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum miles per gallon of the car [/struct_sep0] [struct_sep1] with 8 cylinders [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  and  cars_data.Horsepower > 150  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum miles per gallon of the car [/struct_sep0] [struct_sep1] with 8 cylinders [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  and  cars_data.Cylinders > 4  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum mpg of the cars [/struct_sep0] [struct_sep1] that had 8 cylinders or [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  or  cars_data.Cylinders = 4  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum mpg of the cars [/struct_sep0] [struct_sep1] that had 8 cylinders or [/struct_sep1] [struct_sep2] with 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  or  cars_data.Cylinders = 4  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum mpg of the cars [/struct_sep0] [struct_sep1] that had 8 cylinders or [/struct_sep1] [struct_sep2] on 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  or  cars_data.Year = 1974  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum mpg of the cars [/struct_sep0] [struct_sep1] that had 8 cylinders or [/struct_sep1] [struct_sep2] in 1974 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  or  cars_data.Year = 1974  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum mpg of the cars [/struct_sep0] [struct_sep1] that had 8 cylinders or [/struct_sep1] [struct_sep2] with horsepower more than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  or  cars_data.Horsepower > 150  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum mpg of the cars [/struct_sep0] [struct_sep1] that had 8 cylinders or [/struct_sep1] [struct_sep2] with a horsepower greater than 150 ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  or  cars_data.Horsepower > 150  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the maximum mpg of the cars [/struct_sep0] [struct_sep1] that had 8 cylinders or [/struct_sep1] [struct_sep2] with more than 4 cylinders ? [/struct_sep2] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select cars_data.MPG from continents  where  cars_data.Cylinders = 8  or  cars_data.Cylinders > 4  order by cars_data.MPG desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the name of the countries [/struct_sep0] [struct_sep1] with at least 3 manufacturers ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName from continents  where  count ( car_makers.* )  >= 3  group by countries.CountryName "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] with at least 3 manufacturers ? [/struct_sep1] | car _ 1 | continents : contid, continent | countries : countryid, countryname, continent | car _ makers : id, maker, fullname, country | model _ list : modelid, maker, model | car _ names : makeid, model, make | cars _ data : id, mpg, cylinders, edispl, horsepower, weight, accelerate, year",
        "gold_natsql": "select countries.CountryName from continents  where  count ( car_makers.* )  >= 3  group by countries.CountryName "
    },
    {
        "input": "[struct_sep0] Which country [/struct_sep0] [struct_sep1] in ' USA ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Country from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which country [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Country from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which country [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Country from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Which country [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Country from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which abbreviation [/struct_sep0] [struct_sep1] in ' USA ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which abbreviation [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which abbreviation [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Which abbreviation [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] List all airline names and their abbreviations [/struct_sep0] [struct_sep1] does Airline ' JetBlue Airways ' belong to ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline , airlines.Abbreviation from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] List all airline names and their abbreviations [/struct_sep0] [struct_sep1] corresponds to JetBlue Airways ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline , airlines.Abbreviation from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] List all airline names and their abbreviations [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline , airlines.Abbreviation from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] List all airline names and their abbreviations [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline , airlines.Abbreviation from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] What are the airline names and abbreviations for airlines [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline , airlines.Abbreviation from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] What are the airline names and abbreviations for airlines [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline , airlines.Abbreviation from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] What are the airline names and abbreviations for airlines [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline , airlines.Abbreviation from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] List the airport code and name [/struct_sep0] [struct_sep1] is the Alton airport at ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportCode , airports.AirportName from airlines  where  airports.AirportName = \"Alton\" "
    },
    {
        "input": "[struct_sep0] List the airport code and name [/struct_sep0] [struct_sep1] with code ' AKO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO )",
        "gold_natsql": "select airports.AirportCode , airports.AirportName from airlines  where  airports.AirportCode = \"AKO\" "
    },
    {
        "input": "[struct_sep0] List the airport code and name [/struct_sep0] [struct_sep1] at City ' Aberdeen ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportCode , airports.AirportName from airlines  where  airports.City = \"Aberdeen\" "
    },
    {
        "input": "[struct_sep0] List the airport code and name [/struct_sep0] [struct_sep1] in Aberdeen ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportCode , airports.AirportName from airlines  where  airports.City = \"Aberdeen\" "
    },
    {
        "input": "[struct_sep0] Give the airport code and airport name corresonding [/struct_sep0] [struct_sep1] is the Alton airport at ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportCode , airports.AirportName from airlines  where  airports.AirportName = \"Alton\" "
    },
    {
        "input": "[struct_sep0] Give the airport code and airport name corresonding [/struct_sep0] [struct_sep1] with code ' AKO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO )",
        "gold_natsql": "select airports.AirportCode , airports.AirportName from airlines  where  airports.AirportCode = \"AKO\" "
    },
    {
        "input": "[struct_sep0] Give the airport code and airport name corresonding [/struct_sep0] [struct_sep1] in Aberdeen ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportCode , airports.AirportName from airlines  where  airports.City = \"Aberdeen\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] in ' USA ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] that have at least 10 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] have at least 10 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] that have fewer than 200 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] have less than 200 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] does Airline ' JetBlue Airways ' belong to ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] in ' USA ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] that have at least 10 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] have at least 10 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] that have fewer than 200 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Give the airline [/struct_sep0] [struct_sep1] have less than 200 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] How many airlines [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] How many airlines [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] How many airlines [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Return the number of airlines [/struct_sep0] [struct_sep1] does Airline ' JetBlue Airways ' belong to ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] Return the number of airlines [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Return the number of airlines [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Return the number of airlines [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Which city and country [/struct_sep0] [struct_sep1] in the city of Anthony . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.City , airports.Country from airlines  where  airports.City = \"Anthony\" "
    },
    {
        "input": "[struct_sep0] Which city and country [/struct_sep0] [struct_sep1] with code ' AKO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO )",
        "gold_natsql": "select airports.City , airports.Country from airlines  where  airports.AirportCode = \"AKO\" "
    },
    {
        "input": "[struct_sep0] Which city and country [/struct_sep0] [struct_sep1] in Aberdeen ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.City , airports.Country from airlines  where  airports.City = \"Aberdeen\" "
    },
    {
        "input": "[struct_sep0] Return the name of the airport [/struct_sep0] [struct_sep1] in the city of Anthony . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.City = \"Anthony\" "
    },
    {
        "input": "[struct_sep0] Return the name of the airport [/struct_sep0] [struct_sep1] is the Alton airport at ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.AirportName = \"Alton\" "
    },
    {
        "input": "[struct_sep0] Return the name of the airport [/struct_sep0] [struct_sep1] in Aberdeen ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.City = \"Aberdeen\" "
    },
    {
        "input": "[struct_sep0] Return the name of the airport [/struct_sep0] [struct_sep1] which do not have any flight in and out . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  @.@ not in flights.SourceAirport  and  @.@ not in flights.DestAirport "
    },
    {
        "input": "[struct_sep0] Return the name of the airport [/struct_sep0] [struct_sep1] do not have departing or arriving flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  @.@ not in flights.SourceAirport  and  @.@ not in flights.DestAirport "
    },
    {
        "input": "[struct_sep0] What are airport names [/struct_sep0] [struct_sep1] in the city of Anthony . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.City = \"Anthony\" "
    },
    {
        "input": "[struct_sep0] What are airport names [/struct_sep0] [struct_sep1] with code ' AKO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO )",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.AirportCode = \"AKO\" "
    },
    {
        "input": "[struct_sep0] What are the names of airports [/struct_sep0] [struct_sep1] in the city of Anthony . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.City = \"Anthony\" "
    },
    {
        "input": "[struct_sep0] What are the names of airports [/struct_sep0] [struct_sep1] with code ' AKO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO )",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.AirportCode = \"AKO\" "
    },
    {
        "input": "[struct_sep0] What are the names of airports [/struct_sep0] [struct_sep1] which do not have any flight in and out . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  @.@ not in flights.SourceAirport  and  @.@ not in flights.DestAirport "
    },
    {
        "input": "[struct_sep0] What are the names of airports [/struct_sep0] [struct_sep1] do not have departing or arriving flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  @.@ not in flights.SourceAirport  and  @.@ not in flights.DestAirport "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] have destination ATO ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] into ATO . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] does airline ' JetBlue Airways ' have ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( flights.* )  from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] arriving at Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] landing at APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] departing from ' APG ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] does airline ' JetBlue Airways ' have ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( flights.* )  from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] departing from Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] leaving from APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] arriving at Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] landing at APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] departing from ' APG ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] does airline ' JetBlue Airways ' have ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( flights.* )  from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] departing from Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] leaving from APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] arriving at Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Count the number of flights [/struct_sep0] [struct_sep1] landing at APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] departing from ' APG ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] have destination ATO ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] into ATO . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] departing from Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] leaving from APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] arriving at Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many flights [/struct_sep0] [struct_sep1] landing at APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select count ( flights.* )  from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] How many ' United Airlines ' flights [/struct_sep0] [struct_sep1] leaving from AHD Airport . [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.SourceAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] How many ' United Airlines ' flights [/struct_sep0] [struct_sep1] with source airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.SourceAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] How many ' United Airlines ' flights [/struct_sep0] [struct_sep1] with destination airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.DestAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Count the number of United Airlines flights [/struct_sep0] [struct_sep1] leaving from AHD Airport . [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.SourceAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Count the number of United Airlines flights [/struct_sep0] [struct_sep1] with source airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.SourceAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Count the number of United Airlines flights [/struct_sep0] [struct_sep1] with destination airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.DestAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Return the number of United Airlines flights [/struct_sep0] [struct_sep1] go to Airport ' ASY ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.DestAirport = \"ASY\" "
    },
    {
        "input": "[struct_sep0] Return the number of United Airlines flights [/struct_sep0] [struct_sep1] arriving in ASY Airport . [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.DestAirport = \"ASY\" "
    },
    {
        "input": "[struct_sep0] Return the number of United Airlines flights [/struct_sep0] [struct_sep1] with destination airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( United Airlines ), abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select count ( airlines.* )  from airlines  where  airlines.Airline = \"United Airlines\"  and  flights.DestAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] that have at least 10 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] have at least 10 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] that have fewer than 200 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airline [/struct_sep0] [struct_sep1] have less than 200 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] that have at least 10 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] have at least 10 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] that have fewer than 200 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] What airline [/struct_sep0] [struct_sep1] have less than 200 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] that have at least 10 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] have at least 10 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] that have fewer than 200 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find the abbreviation and country of the airline [/struct_sep0] [struct_sep1] have less than 200 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Abbreviation , airlines.Country from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] go to Airport ' ASY ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.DestAirport = \"ASY\" "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] arriving in ASY Airport . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.DestAirport = \"ASY\" "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] with destination airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.DestAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] from both APG and CVO airports ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] go to Airport ' ASY ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.DestAirport = \"ASY\" "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] arriving in ASY Airport . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.DestAirport = \"ASY\" "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] leaving from AHD Airport . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] with source airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Which airlines have a flight [/struct_sep0] [struct_sep1] from both APG and CVO airports ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] that have at least 10 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] have at least 10 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] that have fewer than 200 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] have less than 200 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airlines have departing flights [/struct_sep0] [struct_sep1] go to Airport ' ASY ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.DestAirport = \"ASY\" "
    },
    {
        "input": "[struct_sep0] Which airlines have departing flights [/struct_sep0] [struct_sep1] arriving in ASY Airport . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ASY ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.DestAirport = \"ASY\" "
    },
    {
        "input": "[struct_sep0] Which airlines have departing flights [/struct_sep0] [struct_sep1] leaving from AHD Airport . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Which airlines have departing flights [/struct_sep0] [struct_sep1] with source airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Which airlines have departing flights [/struct_sep0] [struct_sep1] with destination airport AHD ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AHD ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AHD ), destairport ( AHD )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.DestAirport = \"AHD\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] that have fewer than 200 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] have less than 200 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] that have fewer than 200 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] have less than 200 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  < 200  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] that have at least 10 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Find all airlines [/struct_sep0] [struct_sep1] have at least 10 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] in the USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] has abbreviation ' UAL ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] with abbreviation ' UAL ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation ( UAL ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Abbreviation = \"UAL\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] are from USA ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] in the USA . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country ( USA ) | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  airlines.Country = \"USA\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] that have flights from both airports ' APG ' and ' CVO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG, CVO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG, CVO ), destairport ( APG, CVO )",
        "gold_natsql": "select airlines.Airline from airlines  where  flights.SourceAirport = \"APG\"  and  flights.SourceAirport = \"CVO\" "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] that have at least 10 flights . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] Which airlines [/struct_sep0] [struct_sep1] have at least 10 flights ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airlines.Airline from airlines  where  count ( flights.* )  > 10  group by airlines.Airline "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] have destination ATO ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] into ATO . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] does airline ' JetBlue Airways ' have ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] arriving at Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] landing at APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] have destination ATO ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] into ATO . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] does airline ' JetBlue Airways ' have ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] arriving at Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] landing at APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] departing from ' APG ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] have destination ATO ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] into ATO . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] does airline ' JetBlue Airways ' have ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] departing from Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] What are flight numbers of flights [/struct_sep0] [struct_sep1] leaving from APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] departing from ' APG ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] have destination ATO ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] into ATO . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( ATO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.DestAirport = \"ATO\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] does airline ' JetBlue Airways ' have ? [/struct_sep1] | flight _ 2 | airlines : uid, airline ( JetBlue Airways ), abbreviation ( JetBlue ), country | airports : city, airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select flights.FlightNo from airlines  where  airlines.Airline = \"JetBlue Airways\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] departing from Airport ' APG ' ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Give the flight numbers of flights [/struct_sep0] [struct_sep1] leaving from APG . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( APG ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( APG ), destairport ( APG )",
        "gold_natsql": "select flights.FlightNo from airlines  where  flights.SourceAirport = \"APG\" "
    },
    {
        "input": "[struct_sep0] Find the name of airports [/struct_sep0] [struct_sep1] in the city of Anthony . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.City = \"Anthony\" "
    },
    {
        "input": "[struct_sep0] Find the name of airports [/struct_sep0] [struct_sep1] is the Alton airport at ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Alton ), airportcode, airportname ( Alton ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.AirportName = \"Alton\" "
    },
    {
        "input": "[struct_sep0] Find the name of airports [/struct_sep0] [struct_sep1] with code ' AKO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO )",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.AirportCode = \"AKO\" "
    },
    {
        "input": "[struct_sep0] Find the name of airports [/struct_sep0] [struct_sep1] in Aberdeen ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.City = \"Aberdeen\" "
    },
    {
        "input": "[struct_sep0] Which airports [/struct_sep0] [struct_sep1] in the city of Anthony . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Anthony ), airportcode, airportname ( Anthony ), country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.City = \"Anthony\" "
    },
    {
        "input": "[struct_sep0] Which airports [/struct_sep0] [struct_sep1] with code ' AKO ' . [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city, airportcode ( AKO ), airportname, country, countryabbrev | flights : airline, flightno, sourceairport ( AKO ), destairport ( AKO )",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.AirportCode = \"AKO\" "
    },
    {
        "input": "[struct_sep0] Which airports [/struct_sep0] [struct_sep1] in Aberdeen ? [/struct_sep1] | flight _ 2 | airlines : uid, airline, abbreviation, country | airports : city ( Aberdeen ), airportcode, airportname, country, countryabbrev | flights : airline, flightno, sourceairport, destairport",
        "gold_natsql": "select airports.AirportName from airlines  where  airports.City = \"Aberdeen\" "
    },
    {
        "input": "[struct_sep0] List the names of employees [/struct_sep0] [struct_sep1] under age 30 come from ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  employee.Age < 30 "
    },
    {
        "input": "[struct_sep0] List the names of employees [/struct_sep0] [struct_sep1] who never won any award in the evaluation . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  @.@ not in evaluation.* "
    },
    {
        "input": "[struct_sep0] List the names of employees [/struct_sep0] [struct_sep1] who never received any evaluation ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  @.@ not in evaluation.* "
    },
    {
        "input": "[struct_sep0] Which cities [/struct_sep0] [struct_sep1] do more than one employee [/struct_sep1] [struct_sep2] and sort in ascending order of age . [/struct_sep2] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.City from employee  where  count ( employee.* )  > 1  group by employee.City  order by employee.Age asc"
    },
    {
        "input": "[struct_sep0] Which cities [/struct_sep0] [struct_sep1] do more than one employee [/struct_sep1] [struct_sep2] who never won any award in the evaluation . [/struct_sep2] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.City from employee  where  count ( employee.* )  > 1  and  @.@ not in evaluation.*  group by employee.City "
    },
    {
        "input": "[struct_sep0] Which cities [/struct_sep0] [struct_sep1] do more than one employee [/struct_sep1] [struct_sep2] who never received any evaluation ? [/struct_sep2] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.City from employee  where  count ( employee.* )  > 1  and  @.@ not in evaluation.*  group by employee.City "
    },
    {
        "input": "[struct_sep0] Find the manager name and district of the shop [/struct_sep0] [struct_sep1] in descending order of number of products . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Manager_name , shop.District from employee  order by shop.Number_products desc"
    },
    {
        "input": "[struct_sep0] Find the manager name and district of the shop [/struct_sep0] [struct_sep1] that do not hire any employee . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Manager_name , shop.District from employee  where  @.@ not in hiring.* "
    },
    {
        "input": "[struct_sep0] What are the manager name and district of the shop [/struct_sep0] [struct_sep1] in descending order of number of products . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Manager_name , shop.District from employee  order by shop.Number_products desc"
    },
    {
        "input": "[struct_sep0] What are the manager name and district of the shop [/struct_sep0] [struct_sep1] that do not hire any employee . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Manager_name , shop.District from employee  where  @.@ not in hiring.* "
    },
    {
        "input": "[struct_sep0] Return the name , location and district of all shops [/struct_sep0] [struct_sep1] whose number of products is the largest . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name , shop.Location , shop.District from employee  order by shop.Number_products desc limit 1"
    },
    {
        "input": "[struct_sep0] Return the name , location and district of all shops [/struct_sep0] [struct_sep1] that sells the largest number of products ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name , shop.Location , shop.District from employee  order by shop.Number_products desc limit 1"
    },
    {
        "input": "[struct_sep0] Return the name , location and district of all shops [/struct_sep0] [struct_sep1] that do not hire any employee . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name , shop.Location , shop.District from employee  where  @.@ not in hiring.* "
    },
    {
        "input": "[struct_sep0] Find the names of stores [/struct_sep0] [struct_sep1] in descending order of number of products . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name from employee  order by shop.Number_products desc"
    },
    {
        "input": "[struct_sep0] find the name of employee [/struct_sep0] [struct_sep1] and sort in ascending order of age . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  order by employee.Age asc"
    },
    {
        "input": "[struct_sep0] find the name of employee [/struct_sep0] [struct_sep1] under age 30 come from ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  employee.Age < 30 "
    },
    {
        "input": "[struct_sep0] find the name of employee [/struct_sep0] [struct_sep1] who never won any award in the evaluation . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  @.@ not in evaluation.* "
    },
    {
        "input": "[struct_sep0] find the name of employee [/struct_sep0] [struct_sep1] who never received any evaluation ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  @.@ not in evaluation.* "
    },
    {
        "input": "[struct_sep0] Find the name of the employee [/struct_sep0] [struct_sep1] and sort in ascending order of age . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  order by employee.Age asc"
    },
    {
        "input": "[struct_sep0] Find the name of the employee [/struct_sep0] [struct_sep1] under age 30 come from ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  employee.Age < 30 "
    },
    {
        "input": "[struct_sep0] Find the name of the employee [/struct_sep0] [struct_sep1] who never won any award in the evaluation . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  @.@ not in evaluation.* "
    },
    {
        "input": "[struct_sep0] Find the name of the employee [/struct_sep0] [struct_sep1] who never received any evaluation ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  @.@ not in evaluation.* "
    },
    {
        "input": "[struct_sep0] Find the names of employees [/struct_sep0] [struct_sep1] and sort in ascending order of age . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  order by employee.Age asc"
    },
    {
        "input": "[struct_sep0] Find the names of employees [/struct_sep0] [struct_sep1] under age 30 come from ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  employee.Age < 30 "
    },
    {
        "input": "[struct_sep0] What are the names of the employees [/struct_sep0] [struct_sep1] and sort in ascending order of age . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  order by employee.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of the employees [/struct_sep0] [struct_sep1] under age 30 come from ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select employee.Name from employee  where  employee.Age < 30 "
    },
    {
        "input": "[struct_sep0] What is the name of the shop [/struct_sep0] [struct_sep1] whose number of products is the largest . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name from employee  order by shop.Number_products desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of the shop [/struct_sep0] [struct_sep1] that sells the largest number of products ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name from employee  order by shop.Number_products desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of the shop [/struct_sep0] [struct_sep1] in descending order of number of products . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name from employee  order by shop.Number_products desc"
    },
    {
        "input": "[struct_sep0] What is the name of the shop [/struct_sep0] [struct_sep1] that do not hire any employee . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name from employee  where  @.@ not in hiring.* "
    },
    {
        "input": "[struct_sep0] Find the name of the shops [/struct_sep0] [struct_sep1] whose number of products is the largest . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name from employee  order by shop.Number_products desc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name of the shops [/struct_sep0] [struct_sep1] that sells the largest number of products ? [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name from employee  order by shop.Number_products desc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name of the shops [/struct_sep0] [struct_sep1] in descending order of number of products . [/struct_sep1] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.Name from employee  order by shop.Number_products desc"
    },
    {
        "input": "[struct_sep0] Which district has both stores [/struct_sep0] [struct_sep1] with less than 3000 products and [/struct_sep1] [struct_sep2] in descending order of number of products . [/struct_sep2] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.District from employee  where  shop.Number_products < 3000  order by shop.Number_products desc"
    },
    {
        "input": "[struct_sep0] Find the districts [/struct_sep0] [struct_sep1] in which there are both shops selling less than 3000 products and [/struct_sep1] [struct_sep2] in descending order of number of products . [/struct_sep2] | employee _ hire _ evaluation | employee : employee _ id, name, age, city | shop : shop _ id, name, location, district, number _ products, manager _ name | hiring : shop _ id, employee _ id, start _ from, is _ full _ time | evaluation : employee _ id, year _ awarded, bonus",
        "gold_natsql": "select shop.District from employee  where  shop.Number_products < 3000  order by shop.Number_products desc"
    },
    {
        "input": "[struct_sep0] What is the document name and template id for document [/struct_sep0] [struct_sep1] named ' Robbin CV ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] What is the document name and template id for document [/struct_sep0] [struct_sep1] with the name Robbin CV . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] What is the document name and template id for document [/struct_sep0] [struct_sep1] are using the template with type code ' PPT ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the document name and template id for document [/struct_sep0] [struct_sep1] that use the PPT template type . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the document name and template id for document [/struct_sep0] [struct_sep1] that use templates with the code BK ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( BK ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( BK ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"BK\" "
    },
    {
        "input": "[struct_sep0] Return the names and template ids for documents [/struct_sep0] [struct_sep1] named ' Robbin CV ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] Return the names and template ids for documents [/struct_sep0] [struct_sep1] with the name Robbin CV . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] Return the names and template ids for documents [/struct_sep0] [struct_sep1] are using the template with type code ' PPT ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the names and template ids for documents [/struct_sep0] [struct_sep1] that use the PPT template type . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the names and template ids for documents [/struct_sep0] [struct_sep1] that use templates with the code BK ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( BK ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( BK ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name , documents.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"BK\" "
    },
    {
        "input": "[struct_sep0] What is the document id , template id and description for document [/struct_sep0] [struct_sep1] with description with the letter ' w ' in it ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] What is the document id , template id and description for document [/struct_sep0] [struct_sep1] that contain the letter w in their description . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] What is the document id , template id and description for document [/struct_sep0] [struct_sep1] are using the template with type code ' PPT ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the document id , template id and description for document [/struct_sep0] [struct_sep1] that use the PPT template type . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the document id , template id and description for document [/struct_sep0] [struct_sep1] that use templates with the code BK ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( BK ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( BK ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  templates.Template_Type_Code = \"BK\" "
    },
    {
        "input": "[struct_sep0] Return the document id , template id , and description for the document [/struct_sep0] [struct_sep1] with description with the letter ' w ' in it ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] Return the document id , template id , and description for the document [/struct_sep0] [struct_sep1] that contain the letter w in their description . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] Return the document id , template id , and description for the document [/struct_sep0] [struct_sep1] are using the template with type code ' PPT ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the document id , template id , and description for the document [/struct_sep0] [struct_sep1] that use the PPT template type . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the document id , template id , and description for the document [/struct_sep0] [struct_sep1] that use templates with the code BK ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( BK ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( BK ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Template_ID , documents.Document_Description from ref_template_types  where  templates.Template_Type_Code = \"BK\" "
    },
    {
        "input": "[struct_sep0] How many documents [/struct_sep0] [struct_sep1] with description with the letter ' w ' in it ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] How many documents [/struct_sep0] [struct_sep1] that contain the letter w in their description . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] How many documents [/struct_sep0] [struct_sep1] named ' Robbin CV ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] How many documents [/struct_sep0] [struct_sep1] with the name Robbin CV . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] How many documents [/struct_sep0] [struct_sep1] that use templates with the code BK ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( BK ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( BK ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  templates.Template_Type_Code = \"BK\" "
    },
    {
        "input": "[struct_sep0] Count the number of documents [/struct_sep0] [struct_sep1] with description with the letter ' w ' in it ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] Count the number of documents [/struct_sep0] [struct_sep1] that contain the letter w in their description . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] Count the number of documents [/struct_sep0] [struct_sep1] named ' Robbin CV ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] Count the number of documents [/struct_sep0] [struct_sep1] with the name Robbin CV . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] Count the number of documents [/struct_sep0] [struct_sep1] that use templates with the code BK ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( BK ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( BK ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( documents.* )  from ref_template_types  where  templates.Template_Type_Code = \"BK\" "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] What is the id and type code for the template [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Return the id and type code of the template [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID , templates.Template_Type_Code from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] with description with the letter ' w ' in it ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Template_ID from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] named ' Robbin CV ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Template_ID from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] with the name Robbin CV . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Template_ID from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] What are the template ids of any templates [/struct_sep0] [struct_sep1] with description with the letter ' w ' in it ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Template_ID from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] What are the template ids of any templates [/struct_sep0] [struct_sep1] with the name Robbin CV . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Template_ID from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Show ids for all templates [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] What are the ids for templates [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What are the ids for templates [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What are the ids for templates [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] What are the ids for templates [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What are the ids for templates [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What are the ids for templates [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] What are the ids for templates [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] What are the ids for templates [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] What are the ids of templates [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What are the ids of templates [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What are the ids of templates [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] What are the ids of templates [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What are the ids of templates [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What are the ids of templates [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] What are the ids of templates [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] What are the ids of templates [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] Return the ids of templates [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the ids of templates [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the ids of templates [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Return the ids of templates [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the ids of templates [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the ids of templates [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Return the ids of templates [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Return the ids of templates [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] How many templates [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( templates.* )  from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] How many templates [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( templates.* )  from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] How many templates [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( templates.* )  from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] How many templates [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( templates.* )  from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] How many templates [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( templates.* )  from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] How many templates [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( templates.* )  from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] How many templates [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( templates.* )  from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] What is the version number and template type code for the template [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What is the version number and template type code for the template [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What is the version number and template type code for the template [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the version number and template type code for the template [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the version number and template type code for the template [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] What is the version number and template type code for the template [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] What is the version number and template type code for the template [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] What is the version number and template type code for the template [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] Return the version numbers and template type codes of templates [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the version numbers and template type codes of templates [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the version numbers and template type codes of templates [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the version numbers and template type codes of templates [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the version numbers and template type codes of templates [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Return the version numbers and template type codes of templates [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Return the version numbers and template type codes of templates [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Return the version numbers and template type codes of templates [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Version_Number , templates.Template_Type_Code from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] Which template type code [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Which template type code [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Which template type code [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Which template type code [/struct_sep0] [struct_sep1] with less than three templates . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  count ( templates.* )  < 3  group by templates.Template_Type_Code "
    },
    {
        "input": "[struct_sep0] Which template type code [/struct_sep0] [struct_sep1] that are not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the type code of the template type [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the type code of the template type [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Return the type code of the template type [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the type code of the template type [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the type code of the template type [/struct_sep0] [struct_sep1] that have fewer than 3 templates ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  count ( templates.* )  < 3  group by templates.Template_Type_Code "
    },
    {
        "input": "[struct_sep0] Return the type code of the template type [/struct_sep0] [struct_sep1] that are not used for any document ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] that are not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What are the codes of template types [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What are the codes of template types [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What are the codes of template types [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What are the codes of template types [/struct_sep0] [struct_sep1] that are not used for any document ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What is the template type code of the template [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What is the template type code of the template [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] What is the template type code of the template [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the template type code of the template [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What is the template type code of the template [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] What is the template type code of the template [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What is the template type code of the template [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What is the template type code of the template [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] Return the template type code of the template [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the template type code of the template [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the template type code of the template [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the template type code of the template [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the template type code of the template [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Return the template type code of the template [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the template type code of the template [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the template type code of the template [/struct_sep0] [struct_sep1] with the description ' Presentation ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Presentation ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  ref_template_types.Template_Type_Description = \"Presentation\" "
    },
    {
        "input": "[struct_sep0] What are the names of documents [/struct_sep0] [struct_sep1] with description with the letter ' w ' in it ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] What are the names of documents [/struct_sep0] [struct_sep1] that contain the letter w in their description . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] What are the names of documents [/struct_sep0] [struct_sep1] named ' Robbin CV ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] What are the names of documents [/struct_sep0] [struct_sep1] with the name Robbin CV . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] What are the names of documents [/struct_sep0] [struct_sep1] are using the template with type code ' PPT ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What are the names of documents [/struct_sep0] [struct_sep1] that use the PPT template type . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_Name from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Which template type code [/struct_sep0] [struct_sep1] with less than three templates . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  count ( templates.* )  < 3  group by templates.Template_Type_Code "
    },
    {
        "input": "[struct_sep0] Which template type code [/struct_sep0] [struct_sep1] that are not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the code of the template type [/struct_sep0] [struct_sep1] that have fewer than 3 templates ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  count ( templates.* )  < 3  group by templates.Template_Type_Code "
    },
    {
        "input": "[struct_sep0] Return the code of the template type [/struct_sep0] [struct_sep1] that are not used for any document ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Show all template type codes [/struct_sep0] [struct_sep1] with less than three templates . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  count ( templates.* )  < 3  group by templates.Template_Type_Code "
    },
    {
        "input": "[struct_sep0] What are the codes of template types [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] What are the codes of template types [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What are the codes of template types [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] What are the codes of template types [/struct_sep0] [struct_sep1] that have fewer than 3 templates ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_Type_Code from ref_template_types  where  count ( templates.* )  < 3  group by templates.Template_Type_Code "
    },
    {
        "input": "[struct_sep0] Return the template type description of the template type [/struct_sep0] [struct_sep1] with the description ' Book ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description ( Book ) | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select ref_template_types.Template_Type_Description from ref_template_types  where  ref_template_types.Template_Type_Description = \"Book\" "
    },
    {
        "input": "[struct_sep0] Return the type code of the template type [/struct_sep0] [struct_sep1] with the code AD . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( AD ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( AD ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select ref_template_types.Template_Type_Code from ref_template_types  where  ref_template_types.Template_Type_Code = \"AD\" "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] not used by any document . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] that are not used in any documents ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  except_  @.@ is documents.* "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] with template type code PP or PPT ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] that have the code PP or PPT . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT, PP ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT, PP ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"PP\"  or  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] have template type code CV ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Template_Type_Code = \"CV\" "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] with version number later than 5 ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] with a version number greater than 5 . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  templates.Version_Number > 5 "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] used by document with the name ' Data base ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] Return the ids corresponding to templates [/struct_sep0] [struct_sep1] that is used by a document named Data base . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Data base ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select templates.Template_ID from ref_template_types  where  documents.Document_Name = \"Data base\" "
    },
    {
        "input": "[struct_sep0] How many paragraphs for the document [/struct_sep0] [struct_sep1] with name ' Welcome to NY ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( paragraphs.* )  from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] How many paragraphs for the document [/struct_sep0] [struct_sep1] with the name ' Customer reviews ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Customer reviews ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( paragraphs.* )  from ref_template_types  where  documents.Document_Name = \"Customer reviews\" "
    },
    {
        "input": "[struct_sep0] How many paragraphs for the document [/struct_sep0] [struct_sep1] that contain the paragraph text ' Brazil ' and ' Ireland ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select count ( paragraphs.* )  from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] Count the number of paragraphs [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select count ( paragraphs.* )  from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] Count the number of paragraphs [/struct_sep0] [struct_sep1] that includes the text ' Korea ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select count ( paragraphs.* )  from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] Count the number of paragraphs [/struct_sep0] [struct_sep1] in the document titled ' Welcome to NY ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select count ( paragraphs.* )  from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] Show paragraph details for paragraph [/struct_sep0] [struct_sep1] in the document named ' Summer Show ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Other_Details from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] Show paragraph details for paragraph [/struct_sep0] [struct_sep1] in the document titled ' Welcome to NY ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Other_Details from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] Show paragraph details for paragraph [/struct_sep0] [struct_sep1] ordered by id . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Other_Details from ref_template_types  order by paragraphs.Document_ID asc"
    },
    {
        "input": "[struct_sep0] Show paragraph details for paragraph [/struct_sep0] [struct_sep1] with paragraph text ' Brazil ' and ' Ireland ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Other_Details from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] What are the details for the paragraph [/struct_sep0] [struct_sep1] in the document named ' Summer Show ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Other_Details from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] What are the details for the paragraph [/struct_sep0] [struct_sep1] in the document titled ' Welcome to NY ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Other_Details from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] What are the details for the paragraph [/struct_sep0] [struct_sep1] with paragraph text ' Brazil ' and ' Ireland ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Other_Details from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] Show all paragraph ids and texts for the document [/struct_sep0] [struct_sep1] with name ' Summer Show ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Paragraph_ID , paragraphs.Paragraph_Text from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] Show all paragraph ids and texts for the document [/struct_sep0] [struct_sep1] with the name ' Customer reviews ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Customer reviews ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Paragraph_ID , paragraphs.Paragraph_Text from ref_template_types  where  documents.Document_Name = \"Customer reviews\" "
    },
    {
        "input": "[struct_sep0] Show all paragraph ids and texts for the document [/struct_sep0] [struct_sep1] that contain the paragraph text ' Brazil ' and ' Ireland ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Paragraph_ID , paragraphs.Paragraph_Text from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] What are the ids and texts of paragraphs [/struct_sep0] [struct_sep1] in the document named ' Summer Show ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Paragraph_ID , paragraphs.Paragraph_Text from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] What are the ids and texts of paragraphs [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Paragraph_ID , paragraphs.Paragraph_Text from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] What are the ids and texts of paragraphs [/struct_sep0] [struct_sep1] that includes the text ' Korea ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Paragraph_ID , paragraphs.Paragraph_Text from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] What are the paragraph texts for the document [/struct_sep0] [struct_sep1] with name ' Summer Show ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Paragraph_Text from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] What are the paragraph texts for the document [/struct_sep0] [struct_sep1] with name ' Welcome to NY ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Paragraph_Text from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] What are the paragraph texts for the document [/struct_sep0] [struct_sep1] that contain the paragraph text ' Brazil ' and ' Ireland ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Paragraph_Text from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] Show all document ids and the number of paragraphs [/struct_sep0] [struct_sep1] in each document . [/struct_sep1] [struct_sep2] with text ' Korea ' . [/struct_sep2] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID , count ( paragraphs.* )  from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\"  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] Return the different document ids along [/struct_sep0] [struct_sep1] with the number of paragraphs corresponding to each , [/struct_sep1] [struct_sep2] with text ' Korea ' . [/struct_sep2] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID , count ( paragraphs.* )  from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\"  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] List all document ids [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] List all document ids [/struct_sep0] [struct_sep1] ordered by id . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  order by paragraphs.Document_ID asc"
    },
    {
        "input": "[struct_sep0] List all document ids [/struct_sep0] [struct_sep1] with 1 to 2 paragraphs ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  between 1 and 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] List all document ids [/struct_sep0] [struct_sep1] with paragraph text ' Brazil ' and ' Ireland ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with name ' Summer Show ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with name ' Welcome to NY ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with the name ' Customer reviews ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Customer reviews ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Customer reviews\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] that have between one and two paragraphs . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  between 1 and 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with paragraph text ' Brazil ' and ' Ireland ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] that contain the paragraph text ' Brazil ' and ' Ireland ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] What is the document id and name [/struct_sep0] [struct_sep1] using templates with template type code BK . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( BK ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( BK ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Document_Name from ref_template_types  where  templates.Template_Type_Code = \"BK\" "
    },
    {
        "input": "[struct_sep0] Return the id and name of the document [/struct_sep0] [struct_sep1] with description with the letter ' w ' in it ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Document_Name from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] Return the id and name of the document [/struct_sep0] [struct_sep1] that contain the letter w in their description . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Document_Name from ref_template_types  where  documents.Document_Description like \"%w%\" "
    },
    {
        "input": "[struct_sep0] Return the id and name of the document [/struct_sep0] [struct_sep1] named ' Robbin CV ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Document_Name from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] Return the id and name of the document [/struct_sep0] [struct_sep1] with the name Robbin CV . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( CV ), template _ type _ description ( CV ) | templates : template _ id, version _ number, template _ type _ code ( CV ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Robbin CV ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Document_Name from ref_template_types  where  documents.Document_Name = \"Robbin CV\" "
    },
    {
        "input": "[struct_sep0] Return the id and name of the document [/struct_sep0] [struct_sep1] are using the template with type code ' PPT ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Document_Name from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the id and name of the document [/struct_sep0] [struct_sep1] that use the PPT template type . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( PPT ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( PPT ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Document_Name from ref_template_types  where  templates.Template_Type_Code = \"PPT\" "
    },
    {
        "input": "[struct_sep0] Return the id and name of the document [/struct_sep0] [struct_sep1] that use templates with the code BK ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code ( BK ), template _ type _ description | templates : template _ id, version _ number, template _ type _ code ( BK ), date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select documents.Document_ID , documents.Document_Name from ref_template_types  where  templates.Template_Type_Code = \"BK\" "
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] with name ' Summer Show ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] with name ' Welcome to NY ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] with the name ' Customer reviews ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Customer reviews ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Customer reviews\" "
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] ordered by id . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  order by paragraphs.Document_ID asc"
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] that have 2 or more paragraphs ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  >= 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] that have between one and two paragraphs . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  between 1 and 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] with paragraph text ' Brazil ' and ' Ireland ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] Return the id of the document [/struct_sep0] [struct_sep1] that contain the paragraph text ' Brazil ' and ' Ireland ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] What is the document id [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] What is the document id [/struct_sep0] [struct_sep1] with at least two paragraphs . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  >= 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] What is the document id [/struct_sep0] [struct_sep1] with paragraph text ' Brazil ' and ' Ireland ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] Give the ids of documents [/struct_sep0] [struct_sep1] with name ' Summer Show ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] Give the ids of documents [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] Give the ids of documents [/struct_sep0] [struct_sep1] with name ' Welcome to NY ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] Give the ids of documents [/struct_sep0] [struct_sep1] with the name ' Customer reviews ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Customer reviews ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Customer reviews\" "
    },
    {
        "input": "[struct_sep0] Give the ids of documents [/struct_sep0] [struct_sep1] ordered by id . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  order by paragraphs.Document_ID asc"
    },
    {
        "input": "[struct_sep0] Give the ids of documents [/struct_sep0] [struct_sep1] that have 2 or more paragraphs ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  >= 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] Give the ids of documents [/struct_sep0] [struct_sep1] with paragraph text ' Brazil ' and ' Ireland ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] Give the ids of documents [/struct_sep0] [struct_sep1] that contain the paragraph text ' Brazil ' and ' Ireland ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Ireland, Brazil ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Brazil\"  and  paragraphs.Paragraph_Text = \"Ireland\" "
    },
    {
        "input": "[struct_sep0] Show the document id [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] Show the document id [/struct_sep0] [struct_sep1] ordered by id . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  order by paragraphs.Document_ID asc"
    },
    {
        "input": "[struct_sep0] Show the document id [/struct_sep0] [struct_sep1] with at least two paragraphs . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  >= 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] Show the document id [/struct_sep0] [struct_sep1] with 1 to 2 paragraphs ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  between 1 and 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with name ' Summer Show ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Summer Show ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Summer Show\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with text ' Korea ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text ( Korea ), other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  paragraphs.Paragraph_Text = \"Korea\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with name ' Welcome to NY ' . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Welcome to NY ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Welcome to NY\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] with the name ' Customer reviews ' ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name ( Customer reviews ), document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  documents.Document_Name = \"Customer reviews\" "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] that have 2 or more paragraphs ? [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  >= 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] What are the ids of documents [/struct_sep0] [struct_sep1] that have between one and two paragraphs . [/struct_sep1] | cre _ Doc _ Template _ Mgt | ref _ template _ types : template _ type _ code, template _ type _ description | templates : template _ id, version _ number, template _ type _ code, date _ effective _ from, date _ effective _ to, template _ details | documents : document _ id, template _ id, document _ name, document _ description, other _ details | paragraphs : paragraph _ id, document _ id, paragraph _ text, other _ details",
        "gold_natsql": "select paragraphs.Document_ID from ref_template_types  where  count ( paragraphs.* )  between 1 and 2  group by paragraphs.Document_ID "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] who are aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] that teach at least two courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] who teach at least two courses ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] who have not been arranged to teach courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] whose courses have not been arranged ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who are aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] that teach at least two courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who teach at least two courses ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who have not been arranged to teach courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] whose courses have not been arranged ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] Show the name of teachers [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] Show the name of teachers [/struct_sep0] [struct_sep1] ordered by ascending age ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] Show the name of teachers [/struct_sep0] [struct_sep1] that teach at least two courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] Show the name of teachers [/struct_sep0] [struct_sep1] who teach at least two courses ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] Show the name of teachers [/struct_sep0] [struct_sep1] who have not been arranged to teach courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] Show the name of teachers [/struct_sep0] [struct_sep1] whose courses have not been arranged ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] ordered by ascending age ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] that teach at least two courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who teach at least two courses ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who have not been arranged to teach courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] whose courses have not been arranged ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] What are the towns [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Hometown from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] Show names of teachers [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] Show names of teachers [/struct_sep0] [struct_sep1] ordered by ascending age ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] Show names of teachers [/struct_sep0] [struct_sep1] aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] Show names of teachers [/struct_sep0] [struct_sep1] who are aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] Show names of teachers [/struct_sep0] [struct_sep1] who have not been arranged to teach courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] Show names of teachers [/struct_sep0] [struct_sep1] whose courses have not been arranged ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] ordered by ascending age ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who are aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who have not been arranged to teach courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] whose courses have not been arranged ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  @.@ not in course_arrange.* "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] ordered by ascending age ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] who are aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] that teach at least two courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] List the names of teachers [/struct_sep0] [struct_sep1] who teach at least two courses ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] ordered by ascending age ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  order by teacher.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who are aged either 32 or 33 ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  teacher.Age = 32  or  teacher.Age = 33 "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] that teach at least two courses . [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the teachers [/struct_sep0] [struct_sep1] who teach at least two courses ? [/struct_sep1] | course _ teach | course : course _ id, staring _ date, course | teacher : teacher _ id, name, age, hometown | course _ arrange : course _ id, teacher _ id, grade",
        "gold_natsql": "select teacher.Name from course  where  count ( course_arrange.* )  >= 2  group by teacher.Name "
    },
    {
        "input": "[struct_sep0] Find the names of the visitors [/struct_sep0] [struct_sep1] whose membership level is higher than 4 [/struct_sep1] [struct_sep2] , and sort by their age from old to young . [/struct_sep2] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select visitor.Name from museum  where  visitor.Level_of_membership > 4  order by visitor.Age desc"
    },
    {
        "input": "[struct_sep0] Find the name and membership level of the visitors [/struct_sep0] [struct_sep1] whose membership level is higher than 4 [/struct_sep1] [struct_sep2] , and order the results by the level from high to low . [/struct_sep2] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select visitor.Name , visitor.Level_of_membership from museum  where  visitor.Level_of_membership > 4  order by visitor.Level_of_membership desc"
    },
    {
        "input": "[struct_sep0] Find the id and name of the museum [/struct_sep0] [struct_sep1] that were open before 2009 . [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Museum_ID , museum.Name from museum  where  museum.Open_Year < 2009 "
    },
    {
        "input": "[struct_sep0] Find the id and name of the museum [/struct_sep0] [struct_sep1] named Plaza Museum ? [/struct_sep1] | museum _ visit | museum : museum _ id, name ( Plaza Museum ), num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Museum_ID , museum.Name from museum  where  museum.Name = \"Plaza Museum\" "
    },
    {
        "input": "[struct_sep0] Find the id and name of the museum [/struct_sep0] [struct_sep1] opened after 2010 . [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Museum_ID , museum.Name from museum  where  museum.Open_Year > 2010 "
    },
    {
        "input": "[struct_sep0] Find the id and name of the museum [/struct_sep0] [struct_sep1] that had no visitor yet ? [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Museum_ID , museum.Name from museum  where  @.@ not in visit.* "
    },
    {
        "input": "[struct_sep0] Find the average number of staff working for the museums [/struct_sep0] [struct_sep1] named Plaza Museum ? [/struct_sep1] | museum _ visit | museum : museum _ id, name ( Plaza Museum ), num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select avg ( museum.Num_of_Staff )  from museum  where  museum.Name = \"Plaza Museum\" "
    },
    {
        "input": "[struct_sep0] Find the average number of staff working for the museums [/struct_sep0] [struct_sep1] opened after 2010 . [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select avg ( museum.Num_of_Staff )  from museum  where  museum.Open_Year > 2010 "
    },
    {
        "input": "[struct_sep0] Find the average number of staff working for the museums [/struct_sep0] [struct_sep1] that had no visitor yet ? [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select avg ( museum.Num_of_Staff )  from museum  where  @.@ not in visit.* "
    },
    {
        "input": "[struct_sep0] What are the opening year and staff number of the museum [/struct_sep0] [struct_sep1] that has the most staff members ? [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Num_of_Staff , museum.Open_Year from museum  order by museum.Num_of_Staff desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the opening year and staff number of the museum [/struct_sep0] [struct_sep1] that were open before 2009 . [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Num_of_Staff , museum.Open_Year from museum  where  museum.Open_Year < 2009 "
    },
    {
        "input": "[struct_sep0] What are the opening year and staff number of the museum [/struct_sep0] [struct_sep1] opened after 2010 . [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Num_of_Staff , museum.Open_Year from museum  where  museum.Open_Year > 2010 "
    },
    {
        "input": "[struct_sep0] What are the opening year and staff number of the museum [/struct_sep0] [struct_sep1] that had no visitor yet ? [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Num_of_Staff , museum.Open_Year from museum  where  @.@ not in visit.* "
    },
    {
        "input": "[struct_sep0] find the id , name and age for visitors [/struct_sep0] [struct_sep1] whose membership level is not higher than 4 ? [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select visitor.ID , visitor.Name , visitor.Age from museum  where  visitor.Level_of_membership <= 4 "
    },
    {
        "input": "[struct_sep0] What are the id , name and membership level of visitors [/struct_sep0] [struct_sep1] whose membership level is not higher than 4 ? [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select visitor.ID , visitor.Name , visitor.Level_of_membership from museum  where  visitor.Level_of_membership <= 4 "
    },
    {
        "input": "[struct_sep0] What is the name of the museum [/struct_sep0] [struct_sep1] that has the most staff members ? [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Name from museum  order by museum.Num_of_Staff desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of the museum [/struct_sep0] [struct_sep1] that were open before 2009 . [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Name from museum  where  museum.Open_Year < 2009 "
    },
    {
        "input": "[struct_sep0] What is the name of the museum [/struct_sep0] [struct_sep1] named Plaza Museum ? [/struct_sep1] | museum _ visit | museum : museum _ id, name ( Plaza Museum ), num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Name from museum  where  museum.Name = \"Plaza Museum\" "
    },
    {
        "input": "[struct_sep0] What is the name of the museum [/struct_sep0] [struct_sep1] opened after 2010 . [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select museum.Name from museum  where  museum.Open_Year > 2010 "
    },
    {
        "input": "[struct_sep0] Find the name and age of the visitor [/struct_sep0] [struct_sep1] whose membership level is not higher than 4 ? [/struct_sep1] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select visitor.Name , visitor.Age from museum  where  visitor.Level_of_membership <= 4 "
    },
    {
        "input": "[struct_sep0] How many museums [/struct_sep0] [struct_sep1] were opened after 2013 or [/struct_sep1] [struct_sep2] named Plaza Museum ? [/struct_sep2] | museum _ visit | museum : museum _ id, name ( Plaza Museum ), num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select count ( museum.* )  from museum  where  museum.Open_Year > 2013  or  museum.Name = \"Plaza Museum\" "
    },
    {
        "input": "[struct_sep0] How many museums [/struct_sep0] [struct_sep1] were opened after 2013 or [/struct_sep1] [struct_sep2] opened after 2010 . [/struct_sep2] | museum _ visit | museum : museum _ id, name, num _ of _ staff, open _ year | visitor : id, name, level _ of _ membership, age | visit : museum _ id, visitor _ id, num _ of _ ticket, total _ spent",
        "gold_natsql": "select count ( museum.* )  from museum  where  museum.Open_Year > 2013  or  museum.Open_Year > 2010 "
    },
    {
        "input": "[struct_sep0] List the first name and birth date of all players [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.birth_date from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] List the first name and birth date of all players [/struct_sep0] [struct_sep1] , sorted by birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.birth_date from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] List the first name and birth date of all players [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.birth_date from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] List the first name and birth date of all players [/struct_sep0] [struct_sep1] in order of birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.birth_date from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What are the first names and birth dates of players [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.birth_date from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What are the first names and birth dates of players [/struct_sep0] [struct_sep1] , sorted by birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.birth_date from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What are the first names and birth dates of players [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.birth_date from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What are the first names and birth dates of players [/struct_sep0] [struct_sep1] in order of birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.birth_date from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] Find the name of tourney [/struct_sep0] [struct_sep1] were played in 2013 or 2016 ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.tourney_name from players  where  matches.year = 2013  or  matches.year = 2016 "
    },
    {
        "input": "[struct_sep0] Find the name of tourney [/struct_sep0] [struct_sep1] participated in the Australian Open tourney . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( Australian Open ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.tourney_name from players  where  matches.tourney_name = \"Australian Open\" "
    },
    {
        "input": "[struct_sep0] Find the name of tourney [/struct_sep0] [struct_sep1] were left handed ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.tourney_name from players  where  matches.winner_hand = \"L\" "
    },
    {
        "input": "[struct_sep0] List the names of all winners [/struct_sep0] [struct_sep1] participated in the Australian Open tourney . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( Australian Open ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name from players  where  matches.tourney_name = \"Australian Open\" "
    },
    {
        "input": "[struct_sep0] List the names of all winners [/struct_sep0] [struct_sep1] who played in the match with greatest number of minutes . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name from players  order by matches.minutes desc limit 1"
    },
    {
        "input": "[struct_sep0] List the names of all winners [/struct_sep0] [struct_sep1] were left handed ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name from players  where  matches.winner_hand = \"L\" "
    },
    {
        "input": "[struct_sep0] List the names of all winners [/struct_sep0] [struct_sep1] who participated in the WTA Championships . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( WTA Championships ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name from players  where  matches.tourney_name = \"WTA Championships\" "
    },
    {
        "input": "[struct_sep0] List the number of all matches [/struct_sep0] [struct_sep1] participated in the Australian Open tourney . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( Australian Open ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select count ( matches.* )  from players  where  matches.tourney_name = \"Australian Open\" "
    },
    {
        "input": "[struct_sep0] List the number of all matches [/struct_sep0] [struct_sep1] were left handed ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select count ( matches.* )  from players  where  matches.winner_hand = \"L\" "
    },
    {
        "input": "[struct_sep0] List the first and last name of all players [/struct_sep0] [struct_sep1] from the country with code USA . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Last ), hand, birth _ date, country _ code ( USA ) | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc ( USA ), loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc ( USA ), winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.last_name from players  where  players.country_code = \"USA\" "
    },
    {
        "input": "[struct_sep0] List the first and last name of all players [/struct_sep0] [struct_sep1] from the USA ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Last ), hand, birth _ date, country _ code ( USA ) | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc ( USA ), loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc ( USA ), winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.last_name from players  where  players.country_code = \"USA\" "
    },
    {
        "input": "[struct_sep0] What are the full names of all players [/struct_sep0] [struct_sep1] from the country with code USA . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code ( USA ) | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc ( USA ), loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc ( USA ), winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.last_name from players  where  players.country_code = \"USA\" "
    },
    {
        "input": "[struct_sep0] What are the full names of all players [/struct_sep0] [struct_sep1] from the USA ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code ( USA ) | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc ( USA ), loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc ( USA ), winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.first_name , players.last_name from players  where  players.country_code = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find the first name and country code of the player [/struct_sep0] [struct_sep1] from the country with code USA . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code ( USA ) | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc ( USA ), loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc ( USA ), winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code , players.first_name from players  where  players.country_code = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find the first name and country code of the player [/struct_sep0] [struct_sep1] from the USA ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code ( USA ) | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc ( USA ), loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc ( USA ), winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code , players.first_name from players  where  players.country_code = \"USA\" "
    },
    {
        "input": "[struct_sep0] Find the first name and country code of the player [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code , players.first_name from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] Find the first name and country code of the player [/struct_sep0] [struct_sep1] , sorted by birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code , players.first_name from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What is the first name and country code of the player [/struct_sep0] [struct_sep1] from the country with code USA . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code ( USA ) | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc ( USA ), loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc ( USA ), winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code , players.first_name from players  where  players.country_code = \"USA\" "
    },
    {
        "input": "[struct_sep0] What is the first name and country code of the player [/struct_sep0] [struct_sep1] from the USA ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code ( USA ) | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc ( USA ), loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc ( USA ), winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code , players.first_name from players  where  players.country_code = \"USA\" "
    },
    {
        "input": "[struct_sep0] What is the first name and country code of the player [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code , players.first_name from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What is the first name and country code of the player [/struct_sep0] [struct_sep1] , sorted by birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code , players.first_name from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] Find the year [/struct_sep0] [struct_sep1] were played in 2013 or 2016 ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.year from players  where  matches.year = 2013  or  matches.year = 2016 "
    },
    {
        "input": "[struct_sep0] Find the year [/struct_sep0] [struct_sep1] participated in the Australian Open tourney . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( Australian Open ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.year from players  where  matches.tourney_name = \"Australian Open\" "
    },
    {
        "input": "[struct_sep0] Find the year [/struct_sep0] [struct_sep1] were left handed ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.year from players  where  matches.winner_hand = \"L\" "
    },
    {
        "input": "[struct_sep0] Find the name and rank points of the winner [/struct_sep0] [struct_sep1] who played in both 2013 and 2016 . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.winner_rank_points from players  where  matches.year = 2013  and  matches.year = 2016 "
    },
    {
        "input": "[struct_sep0] Find the name and rank points of the winner [/struct_sep0] [struct_sep1] were played in 2013 or 2016 ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.winner_rank_points from players  where  matches.year = 2013  or  matches.year = 2016 "
    },
    {
        "input": "[struct_sep0] Find the name and rank points of the winner [/struct_sep0] [struct_sep1] participated in the Australian Open tourney . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( Australian Open ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.winner_rank_points from players  where  matches.tourney_name = \"Australian Open\" "
    },
    {
        "input": "[struct_sep0] Find the name and rank points of the winner [/struct_sep0] [struct_sep1] who played in the match with greatest number of minutes . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.winner_rank_points from players  order by matches.minutes desc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name and rank points of the winner [/struct_sep0] [struct_sep1] were left handed ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.winner_rank_points from players  where  matches.winner_hand = \"L\" "
    },
    {
        "input": "[struct_sep0] Find the name and rank points of the winner [/struct_sep0] [struct_sep1] who participated in the WTA Championships . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( WTA Championships ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.winner_rank_points from players  where  matches.tourney_name = \"WTA Championships\" "
    },
    {
        "input": "[struct_sep0] Find the name of the winner [/struct_sep0] [struct_sep1] who has the highest rank points and [/struct_sep1] [struct_sep2] were left handed ? [/struct_sep2] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name from players  where  matches.winner_hand = \"L\"  order by matches.winner_rank_points desc limit 1"
    },
    {
        "input": "[struct_sep0] find the names of loser and winner [/struct_sep0] [struct_sep1] who played in both 2013 and 2016 . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.loser_name from players  where  matches.year = 2013  and  matches.year = 2016 "
    },
    {
        "input": "[struct_sep0] find the names of loser and winner [/struct_sep0] [struct_sep1] were played in 2013 or 2016 ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.loser_name from players  where  matches.year = 2013  or  matches.year = 2016 "
    },
    {
        "input": "[struct_sep0] find the names of loser and winner [/struct_sep0] [struct_sep1] participated in the Australian Open tourney . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( Australian Open ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.loser_name from players  where  matches.tourney_name = \"Australian Open\" "
    },
    {
        "input": "[struct_sep0] find the names of loser and winner [/struct_sep0] [struct_sep1] were left handed ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.loser_name from players  where  matches.winner_hand = \"L\" "
    },
    {
        "input": "[struct_sep0] find the names of loser and winner [/struct_sep0] [struct_sep1] who participated in the WTA Championships . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( WTA Championships ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select matches.winner_name , matches.loser_name from players  where  matches.tourney_name = \"WTA Championships\" "
    },
    {
        "input": "[struct_sep0] find the code of the country [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] find the code of the country [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] find the code of the country [/struct_sep0] [struct_sep1] in order of birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] find the code of the country [/struct_sep0] [struct_sep1] that have more than 50 players . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  where  count ( players.* )  > 50  group by players.country_code "
    },
    {
        "input": "[struct_sep0] find the code of the country [/struct_sep0] [struct_sep1] with more than 50 players ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  where  count ( players.* )  > 50  group by players.country_code "
    },
    {
        "input": "[struct_sep0] What is the code of the country [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What is the code of the country [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What is the code of the country [/struct_sep0] [struct_sep1] in order of birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What is the code of the country [/struct_sep0] [struct_sep1] that have more than 50 players . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  where  count ( players.* )  > 50  group by players.country_code "
    },
    {
        "input": "[struct_sep0] What is the code of the country [/struct_sep0] [struct_sep1] with more than 50 players ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  where  count ( players.* )  > 50  group by players.country_code "
    },
    {
        "input": "[struct_sep0] Find the codes of countries [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] Find the codes of countries [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] Find the codes of countries [/struct_sep0] [struct_sep1] in order of birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What are the codes of countries [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What are the codes of countries [/struct_sep0] [struct_sep1] in the order of birth date . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] What are the codes of countries [/struct_sep0] [struct_sep1] in order of birth date ? [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name ( Date ), hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name, winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select players.country_code from players  order by players.birth_date asc"
    },
    {
        "input": "[struct_sep0] Find the number of left handed winners [/struct_sep0] [struct_sep1] participated in the Australian Open tourney . [/struct_sep1] | wta _ 1 | players : player _ id, first _ name, last _ name, hand, birth _ date, country _ code | matches : best _ of, draw _ size, loser _ age, loser _ entry, loser _ hand, loser _ ht, loser _ id, loser _ ioc, loser _ name, loser _ rank, loser _ rank _ points, loser _ seed, match _ num, minutes, round, score, surface, tourney _ date, tourney _ id, tourney _ level, tourney _ name ( Australian Open ), winner _ age, winner _ entry, winner _ hand, winner _ ht, winner _ id, winner _ ioc, winner _ name, winner _ rank, winner _ rank _ points, winner _ seed, year | rankings : ranking _ date, ranking, player _ id, ranking _ points, tours",
        "gold_natsql": "select count (  distinct matches.winner_name )  from players  where  matches.winner_hand = \"L\"  and  matches.tourney_name = \"Australian Open\" "
    },
    {
        "input": "[struct_sep0] List the name and tonnage [/struct_sep0] [struct_sep1] ended up being ' Captured ' ? [/struct_sep1] | battle _ death | battle : id, name, date, bulgarian _ commander, latin _ commander, result | ship : lost _ in _ battle, id, name, tonnage, ship _ type, location, disposition _ of _ ship ( Captured ) | death : caused _ by _ ship _ id, id, note, killed, injured",
        "gold_natsql": "select ship.name , ship.tonnage from battle  where  ship.disposition_of_ship = \"Captured\" "
    },
    {
        "input": "[struct_sep0] What are the name and results of the battles [/struct_sep0] [struct_sep1] that lost any ' Brig ' type shipes ? [/struct_sep1] | battle _ death | battle : id, name, date, bulgarian _ commander, latin _ commander, result | ship : lost _ in _ battle, id, name, tonnage, ship _ type ( Brig ), location, disposition _ of _ ship | death : caused _ by _ ship _ id, id, note, killed, injured",
        "gold_natsql": "select battle.name , battle.result from battle  where  ship.ship_type = \"Brig\" "
    },
    {
        "input": "[struct_sep0] What are the name and results of the battles [/struct_sep0] [struct_sep1] that has lost the ship named ' Lettice ' and [/struct_sep1] [struct_sep2] the ship named ' HMS Atalanta ' [/struct_sep2] | battle : id, name, date, bulgarian _ commander, latin _ commander, result | ship : lost _ in _ battle, id, name ( HMS Atalanta, Lettice ), tonnage, ship _ type, location, disposition _ of _ ship | death : caused _ by _ ship _ id, id, note, killed, injured",
        "gold_natsql": "select battle.name , battle.result from battle  where  ship.name = \"Lettice\"  and  ship.name = \"HMS Atalanta\" "
    },
    {
        "input": "[struct_sep0] What are the different ids and names of the battles [/struct_sep0] [struct_sep1] when the bulgarian commander is not ' Boril ' [/struct_sep1] | battle : id, name, date, bulgarian _ commander ( Boril ), latin _ commander, result | ship : lost _ in _ battle, id, name, tonnage, ship _ type, location, disposition _ of _ ship | death : caused _ by _ ship _ id, id, note, killed, injured",
        "gold_natsql": "select  distinct battle.id , battle.name from battle  where  battle.bulgarian_commander != \"Boril\" "
    },
    {
        "input": "[struct_sep0] What are the different ids and names of the battles [/struct_sep0] [struct_sep1] that has lost the ship named ' Lettice ' and [/struct_sep1] [struct_sep2] the ship named ' HMS Atalanta ' [/struct_sep2] | battle : id, name, date, bulgarian _ commander, latin _ commander, result | ship : lost _ in _ battle, id, name ( HMS Atalanta, Lettice ), tonnage, ship _ type, location, disposition _ of _ ship | death : caused _ by _ ship _ id, id, note, killed, injured",
        "gold_natsql": "select  distinct battle.id , battle.name from battle  where  ship.name = \"Lettice\"  and  ship.name = \"HMS Atalanta\" "
    },
    {
        "input": "[struct_sep0] List the name and date the battle [/struct_sep0] [struct_sep1] when the bulgarian commander is not ' Boril ' [/struct_sep1] | battle : id, name, date, bulgarian _ commander ( Boril ), latin _ commander, result | ship : lost _ in _ battle, id, name, tonnage, ship _ type, location, disposition _ of _ ship | death : caused _ by _ ship _ id, id, note, killed, injured",
        "gold_natsql": "select battle.name , battle.date from battle  where  battle.bulgarian_commander != \"Boril\" "
    },
    {
        "input": "[struct_sep0] List the name and date the battle [/struct_sep0] [struct_sep1] that lost any ' Brig ' type shipes ? [/struct_sep1] | battle _ death | battle : id, name, date, bulgarian _ commander, latin _ commander, result | ship : lost _ in _ battle, id, name, tonnage, ship _ type ( Brig ), location, disposition _ of _ ship | death : caused _ by _ ship _ id, id, note, killed, injured",
        "gold_natsql": "select battle.name , battle.date from battle  where  ship.ship_type = \"Brig\" "
    },
    {
        "input": "[struct_sep0] What is the name and id of the department [/struct_sep0] [struct_sep1] whose name has the substring the computer ? [/struct_sep1] | student _ transcripts _ tracking | addresses : address _ id, line _ 1, line _ 2, line _ 3, city, zip _ postcode, state _ province _ county, country, other _ address _ details | courses : course _ id, course _ name, course _ description, other _ details | departments : department _ id, department _ name, department _ description, other _ details | degree _ programs : degree _ program _ id, department _ id, degree _ summary _ name, degree _ summary _ description, other _ details | sections : section _ id, course _ id, section _ name, section _ description, other _ details | semesters : semester _ id, semester _ name, semester _ description, other _ details | students : student _ id, current _ address _ id, permanent _ address _ id, first _ name, middle _ name, last _ name, cell _ mobile _ number, email _ address, ssn, date _ first _ registered, date _ left, other _ student _ details | student _ enrolment : student _ enrolment _ id, degree _ program _ id, semester _ id, student _ id, other _ details | student _ enrolment _ courses : student _ course _ id, course _ id, student _ enrolment _ id | transcripts : transcript _ id, transcript _ date, other _ details | transcript _ contents : student _ course _ id, transcript _ id",
        "gold_natsql": "select departments.department_name , departments.department_id from addresses  where  departments.department_name like \"%computer%\" "
    },
    {
        "input": "[struct_sep0] List the section_name [/struct_sep0] [struct_sep1] named h ? [/struct_sep1] | student _ transcripts _ tracking | addresses : address _ id, line _ 1, line _ 2, line _ 3, city, zip _ postcode, state _ province _ county, country, other _ address _ details | courses : course _ id, course _ name, course _ description, other _ details | departments : department _ id, department _ name, department _ description, other _ details | degree _ programs : degree _ program _ id, department _ id, degree _ summary _ name, degree _ summary _ description, other _ details | sections : section _ id, course _ id, section _ name, section _ description, other _ details | semesters : semester _ id, semester _ name, semester _ description, other _ details | students : student _ id, current _ address _ id, permanent _ address _ id, first _ name, middle _ name, last _ name, cell _ mobile _ number, email _ address, ssn, date _ first _ registered, date _ left, other _ student _ details | student _ enrolment : student _ enrolment _ id, degree _ program _ id, semester _ id, student _ id, other _ details | student _ enrolment _ courses : student _ course _ id, course _ id, student _ enrolment _ id | transcripts : transcript _ id, transcript _ date, other _ details | transcript _ contents : student _ course _ id, transcript _ id",
        "gold_natsql": "select sections.section_name from addresses  where  sections.section_name = \"h\" "
    },
    {
        "input": "[struct_sep0] What are the names of the sections [/struct_sep0] [struct_sep1] named h ? [/struct_sep1] | student _ transcripts _ tracking | addresses : address _ id, line _ 1, line _ 2, line _ 3, city, zip _ postcode, state _ province _ county, country, other _ address _ details | courses : course _ id, course _ name, course _ description, other _ details | departments : department _ id, department _ name, department _ description, other _ details | degree _ programs : degree _ program _ id, department _ id, degree _ summary _ name, degree _ summary _ description, other _ details | sections : section _ id, course _ id, section _ name, section _ description, other _ details | semesters : semester _ id, semester _ name, semester _ description, other _ details | students : student _ id, current _ address _ id, permanent _ address _ id, first _ name, middle _ name, last _ name, cell _ mobile _ number, email _ address, ssn, date _ first _ registered, date _ left, other _ student _ details | student _ enrolment : student _ enrolment _ id, degree _ program _ id, semester _ id, student _ id, other _ details | student _ enrolment _ courses : student _ course _ id, course _ id, student _ enrolment _ id | transcripts : transcript _ id, transcript _ date, other _ details | transcript _ contents : student _ course _ id, transcript _ id",
        "gold_natsql": "select sections.section_name from addresses  where  sections.section_name = \"h\" "
    },
    {
        "input": "[struct_sep0] What are the first , middle , and last names , [/struct_sep0] [struct_sep1] along with the ids [/struct_sep1] [struct_sep2] , of all students [/struct_sep2] [struct_sep3] named Timmothy Ward ? [/struct_sep3] | student _ transcripts _ tracking | addresses : address _ id, line _ 1, line _ 2, line _ 3, city, zip _ postcode, state _ province _ county, country, other _ address _ details | courses : course _ id, course _ name, course _ description, other _ details | departments : department _ id, department _ name, department _ description, other _ details | degree _ programs : degree _ program _ id, department _ id, degree _ summary _ name, degree _ summary _ description, other _ details | sections : section _ id, course _ id, section _ name, section _ description, other _ details | semesters : semester _ id, semester _ name, semester _ description, other _ details | students : student _ id, current _ address _ id, permanent _ address _ id, first _ name ( Timmothy ), middle _ name, last _ name ( Ward ), cell _ mobile _ number, email _ address, ssn, date _ first _ registered, date _ left, other _ student _ details | student _ enrolment : student _ enrolment _ id, degree _ program _ id, semester _ id, student _ id, other _ details | student _ enrolment _ courses : student _ course _ id, course _ id, student _ enrolment _ id | transcripts : transcript _ id, transcript _ date, other _ details | transcript _ contents : student _ course",
        "gold_natsql": "select students.first_name , students.middle_name , students.last_name , students.student_id from addresses  where  students.first_name = \"Timmothy\"  and  students.last_name = \"Ward\" "
    },
    {
        "input": "[struct_sep0] What is the date and id of the transcript [/struct_sep0] [struct_sep1] with at least 2 course results . [/struct_sep1] | student _ transcripts _ tracking | addresses : address _ id, line _ 1, line _ 2, line _ 3, city, zip _ postcode, state _ province _ county, country, other _ address _ details | courses : course _ id, course _ name, course _ description, other _ details | departments : department _ id, department _ name, department _ description, other _ details | degree _ programs : degree _ program _ id, department _ id, degree _ summary _ name, degree _ summary _ description, other _ details | sections : section _ id, course _ id, section _ name, section _ description, other _ details | semesters : semester _ id, semester _ name, semester _ description, other _ details | students : student _ id, current _ address _ id, permanent _ address _ id, first _ name, middle _ name, last _ name, cell _ mobile _ number, email _ address, ssn, date _ first _ registered, date _ left, other _ student _ details | student _ enrolment : student _ enrolment _ id, degree _ program _ id, semester _ id, student _ id, other _ details | student _ enrolment _ courses : student _ course _ id, course _ id, student _ enrolment _ id | transcripts : transcript _ id, transcript _ date, other _ details | transcript _ contents : student _ course _ id, transcript _ id",
        "gold_natsql": "select transcripts.transcript_date , transcript_contents.transcript_id from addresses  where  count ( transcripts.* )  >= 2  group by transcript_contents.transcript_id "
    },
    {
        "input": "[struct_sep0] What is the date and id of the transcript [/struct_sep0] [struct_sep1] with at least 2 courses listed ? [/struct_sep1] | student _ transcripts _ tracking | addresses : address _ id, line _ 1, line _ 2, line _ 3, city, zip _ postcode, state _ province _ county, country, other _ address _ details | courses : course _ id, course _ name, course _ description, other _ details | departments : department _ id, department _ name, department _ description, other _ details | degree _ programs : degree _ program _ id, department _ id, degree _ summary _ name, degree _ summary _ description, other _ details | sections : section _ id, course _ id, section _ name, section _ description, other _ details | semesters : semester _ id, semester _ name, semester _ description, other _ details | students : student _ id, current _ address _ id, permanent _ address _ id, first _ name, middle _ name, last _ name, cell _ mobile _ number, email _ address, ssn, date _ first _ registered, date _ left, other _ student _ details | student _ enrolment : student _ enrolment _ id, degree _ program _ id, semester _ id, student _ id, other _ details | student _ enrolment _ courses : student _ course _ id, course _ id, student _ enrolment _ id | transcripts : transcript _ id, transcript _ date, other _ details | transcript _ contents : student _ course _ id, transcript _ id",
        "gold_natsql": "select transcripts.transcript_date , transcript_contents.transcript_id from addresses  where  count ( transcripts.* )  >= 2  group by transcript_contents.transcript_id "
    },
    {
        "input": "[struct_sep0] What is the description for the section [/struct_sep0] [struct_sep1] in reversed lexicographical order . [/struct_sep1] | student _ transcripts _ tracking | addresses : address _ id, line _ 1, line _ 2, line _ 3, city, zip _ postcode, state _ province _ county, country, other _ address _ details | courses : course _ id, course _ name, course _ description, other _ details | departments : department _ id, department _ name, department _ description, other _ details | degree _ programs : degree _ program _ id, department _ id, degree _ summary _ name, degree _ summary _ description, other _ details | sections : section _ id, course _ id, section _ name, section _ description, other _ details | semesters : semester _ id, semester _ name, semester _ description, other _ details | students : student _ id, current _ address _ id, permanent _ address _ id, first _ name, middle _ name, last _ name, cell _ mobile _ number, email _ address, ssn, date _ first _ registered, date _ left, other _ student _ details | student _ enrolment : student _ enrolment _ id, degree _ program _ id, semester _ id, student _ id, other _ details | student _ enrolment _ courses : student _ course _ id, course _ id, student _ enrolment _ id | transcripts : transcript _ id, transcript _ date, other _ details | transcript _ contents : student _ course _ id, transcript _ id",
        "gold_natsql": "select sections.section_description from addresses  order by sections.section_name desc"
    },
    {
        "input": "[struct_sep0] What is the description for the section [/struct_sep0] [struct_sep1] in reverse alphabetical order ? [/struct_sep1] | student _ transcripts _ tracking | addresses : address _ id, line _ 1, line _ 2, line _ 3, city, zip _ postcode, state _ province _ county, country, other _ address _ details | courses : course _ id, course _ name, course _ description, other _ details | departments : department _ id, department _ name, department _ description, other _ details | degree _ programs : degree _ program _ id, department _ id, degree _ summary _ name, degree _ summary _ description, other _ details | sections : section _ id, course _ id, section _ name, section _ description, other _ details | semesters : semester _ id, semester _ name, semester _ description, other _ details | students : student _ id, current _ address _ id, permanent _ address _ id, first _ name, middle _ name, last _ name, cell _ mobile _ number, email _ address, ssn, date _ first _ registered, date _ left, other _ student _ details | student _ enrolment : student _ enrolment _ id, degree _ program _ id, semester _ id, student _ id, other _ details | student _ enrolment _ courses : student _ course _ id, course _ id, student _ enrolment _ id | transcripts : transcript _ id, transcript _ date, other _ details | transcript _ contents : student _ course _ id, transcript _ id",
        "gold_natsql": "select sections.section_description from addresses  order by sections.section_name desc"
    },
    {
        "input": "[struct_sep0] List the title of all cartoons [/struct_sep0] [struct_sep1] directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] List the title of all cartoons [/struct_sep0] [struct_sep1] were written by ' Joseph Kuhr ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] List the title of all cartoons [/struct_sep0] [struct_sep1] written by Joseph Kuhr ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] List the title of all cartoons [/struct_sep0] [struct_sep1] ordered by their air date [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Original_air_date asc"
    },
    {
        "input": "[struct_sep0] List the title of all cartoons [/struct_sep0] [struct_sep1] that are ordered by air date ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Original_air_date asc"
    },
    {
        "input": "[struct_sep0] List the title of all cartoons [/struct_sep0] [struct_sep1] directed by ' Ben Jones ' or ' Brandon Vietti ' . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Brandon Vietti, Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Directed_by = \"Ben Jones\"  or  cartoon.Directed_by = \"Brandon Vietti\" "
    },
    {
        "input": "[struct_sep0] List the title of all cartoons [/struct_sep0] [struct_sep1] directed by Ben Jones or [/struct_sep1] [struct_sep2] Brandon Vietti ? [/struct_sep2] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Brandon Vietti, Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Directed_by = \"Ben Jones\"  or  cartoon.Directed_by = \"Brandon Vietti\" "
    },
    {
        "input": "[struct_sep0] What are the names of all cartoons [/struct_sep0] [struct_sep1] in alphabetical order . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Title asc"
    },
    {
        "input": "[struct_sep0] What are the names of all cartoons [/struct_sep0] [struct_sep1] were written by ' Joseph Kuhr ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] What are the names of all cartoons [/struct_sep0] [struct_sep1] that are ordered by air date ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Original_air_date asc"
    },
    {
        "input": "[struct_sep0] How many cartoons [/struct_sep0] [struct_sep1] directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( cartoon.* )  from tv_channel  where  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] How many cartoons [/struct_sep0] [struct_sep1] directed by ' Ben Jones ' or ' Brandon Vietti ' . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Brandon Vietti, Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( cartoon.* )  from tv_channel  where  cartoon.Directed_by = \"Ben Jones\"  or  cartoon.Directed_by = \"Brandon Vietti\" "
    },
    {
        "input": "[struct_sep0] How many cartoons [/struct_sep0] [struct_sep1] directed by Ben Jones or [/struct_sep1] [struct_sep2] Brandon Vietti ? [/struct_sep2] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Brandon Vietti, Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( cartoon.* )  from tv_channel  where  cartoon.Directed_by = \"Ben Jones\"  or  cartoon.Directed_by = \"Brandon Vietti\" "
    },
    {
        "input": "[struct_sep0] list all cartoon titles and their directors [/struct_sep0] [struct_sep1] in alphabetical order . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  order by cartoon.Title asc"
    },
    {
        "input": "[struct_sep0] list all cartoon titles and their directors [/struct_sep0] [struct_sep1] directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  where  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] list all cartoon titles and their directors [/struct_sep0] [struct_sep1] were written by ' Joseph Kuhr ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] list all cartoon titles and their directors [/struct_sep0] [struct_sep1] written by Joseph Kuhr ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] list all cartoon titles and their directors [/struct_sep0] [struct_sep1] directed by ' Ben Jones ' or ' Brandon Vietti ' . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Brandon Vietti, Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  where  cartoon.Directed_by = \"Ben Jones\"  or  cartoon.Directed_by = \"Brandon Vietti\" "
    },
    {
        "input": "[struct_sep0] What is the name and directors of all the cartoons [/struct_sep0] [struct_sep1] in alphabetical order . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  order by cartoon.Title asc"
    },
    {
        "input": "[struct_sep0] What is the name and directors of all the cartoons [/struct_sep0] [struct_sep1] directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  where  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] What is the name and directors of all the cartoons [/struct_sep0] [struct_sep1] were written by ' Joseph Kuhr ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] What is the name and directors of all the cartoons [/struct_sep0] [struct_sep1] directed by ' Ben Jones ' or ' Brandon Vietti ' . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Brandon Vietti, Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  where  cartoon.Directed_by = \"Ben Jones\"  or  cartoon.Directed_by = \"Brandon Vietti\" "
    },
    {
        "input": "[struct_sep0] What is the name and directors of all the cartoons [/struct_sep0] [struct_sep1] directed by Ben Jones or [/struct_sep1] [struct_sep2] Brandon Vietti ? [/struct_sep2] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Brandon Vietti, Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title , cartoon.Directed_by from tv_channel  where  cartoon.Directed_by = \"Ben Jones\"  or  cartoon.Directed_by = \"Brandon Vietti\" "
    },
    {
        "input": "[struct_sep0] List the title of all cartoon [/struct_sep0] [struct_sep1] in alphabetical order . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Title asc"
    },
    {
        "input": "[struct_sep0] List the title of all cartoon [/struct_sep0] [struct_sep1] were written by ' Joseph Kuhr ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] List the title of all cartoon [/struct_sep0] [struct_sep1] written by Joseph Kuhr ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] List the title of all cartoon [/struct_sep0] [struct_sep1] ordered by their air date [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Original_air_date asc"
    },
    {
        "input": "[struct_sep0] List the title of all cartoon [/struct_sep0] [struct_sep1] that are ordered by air date ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Original_air_date asc"
    },
    {
        "input": "[struct_sep0] What are the titles of all cartoons [/struct_sep0] [struct_sep1] in alphabetical order . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Title asc"
    },
    {
        "input": "[struct_sep0] What are the titles of all cartoons [/struct_sep0] [struct_sep1] were written by ' Joseph Kuhr ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Joseph Kuhr ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  where  cartoon.Written_by = \"Joseph Kuhr\" "
    },
    {
        "input": "[struct_sep0] What are the titles of all cartoons [/struct_sep0] [struct_sep1] that are ordered by air date ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select cartoon.Title from tv_channel  order by cartoon.Original_air_date asc"
    },
    {
        "input": "[struct_sep0] What is the content of TV Channel [/struct_sep0] [struct_sep1] using language English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Content from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What is the content of TV Channel [/struct_sep0] [struct_sep1] that supports high definition TV ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Content from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] What is the Package Option of TV Channel [/struct_sep0] [struct_sep1] using language English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What is the Package Option of TV Channel [/struct_sep0] [struct_sep1] that supports high definition TV ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] What are the Package Options of the TV Channels [/struct_sep0] [struct_sep1] use the English language ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] How many TV Channel [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( tv_channel.* )  from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] How many TV Channel [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( tv_channel.* )  from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] How many TV Channel [/struct_sep0] [struct_sep1] that supports high definition TV ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( tv_channel.* )  from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] How many TV Channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( tv_channel.* )  from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] How many TV Channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( tv_channel.* )  from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] How many TV Channels [/struct_sep0] [struct_sep1] whose series names are Sky Radio ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select count ( tv_channel.* )  from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] List the Episode of all TV series [/struct_sep0] [struct_sep1] with Episode ' A Love of a Lifetime ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode ( A Love of a Lifetime ), air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Episode from tv_channel  where  tv_series.Episode = \"A Love of a Lifetime\" "
    },
    {
        "input": "[struct_sep0] List the Episode of all TV series [/struct_sep0] [struct_sep1] with Episode ' A Love of a Lifetime ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode ( A Love of a Lifetime ), air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Episode from tv_channel  where  tv_series.Episode = \"A Love of a Lifetime\" "
    },
    {
        "input": "[struct_sep0] List the Episode of all TV series [/struct_sep0] [struct_sep1] named ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Episode from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What are all of the episodes [/struct_sep0] [struct_sep1] with Episode ' A Love of a Lifetime ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode ( A Love of a Lifetime ), air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Episode from tv_channel  where  tv_series.Episode = \"A Love of a Lifetime\" "
    },
    {
        "input": "[struct_sep0] What are all of the episodes [/struct_sep0] [struct_sep1] with Episode ' A Love of a Lifetime ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode ( A Love of a Lifetime ), air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Episode from tv_channel  where  tv_series.Episode = \"A Love of a Lifetime\" "
    },
    {
        "input": "[struct_sep0] What is the air date of TV series [/struct_sep0] [struct_sep1] sorted by rating . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Air_Date from tv_channel  order by tv_series.Rating asc"
    },
    {
        "input": "[struct_sep0] What is the air date of TV series [/struct_sep0] [struct_sep1] named ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Air_Date from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What is Weekly Rank of TV series [/struct_sep0] [struct_sep1] sorted by rating . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Weekly_Rank from tv_channel  order by tv_series.Rating asc"
    },
    {
        "input": "[struct_sep0] What is Weekly Rank of TV series [/struct_sep0] [struct_sep1] named ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Weekly_Rank from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What is the episode for the TV series [/struct_sep0] [struct_sep1] sorted by rating . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Episode from tv_channel  order by tv_series.Rating asc"
    },
    {
        "input": "[struct_sep0] What is the episode for the TV series [/struct_sep0] [struct_sep1] with Episode ' A Love of a Lifetime ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode ( A Love of a Lifetime ), air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Episode from tv_channel  where  tv_series.Episode = \"A Love of a Lifetime\" "
    },
    {
        "input": "[struct_sep0] What is the episode for the TV series [/struct_sep0] [struct_sep1] with Episode ' A Love of a Lifetime ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode ( A Love of a Lifetime ), air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_series.Episode from tv_channel  where  tv_series.Episode = \"A Love of a Lifetime\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] using language English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] use the English language ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] are playing some cartoon written by Todd Casey ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] that do not use English . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] that do not have any cartoons directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  except_  @.@ is cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] Find the package choice and series name of the TV channel [/struct_sep0] [struct_sep1] that do not have any cartoon directed by Ben Jones . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  @.@ not in cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] What are the package options and the name of the series for the TV Channel [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What are the package options and the name of the series for the TV Channel [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What are the package options and the name of the series for the TV Channel [/struct_sep0] [struct_sep1] using language English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option , tv_channel.series_name from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] which countries ' tv channels [/struct_sep0] [struct_sep1] that has high definition TV . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Country from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] which countries ' tv channels [/struct_sep0] [struct_sep1] that do not use English . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Country from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] which countries ' tv channels [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Country from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] which countries ' tv channels [/struct_sep0] [struct_sep1] that do not have any cartoons directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Country from tv_channel  where  except_  @.@ is cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] which countries ' tv channels [/struct_sep0] [struct_sep1] that do not have any cartoon directed by Ben Jones . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Country from tv_channel  where  @.@ not in cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] Find the series name and country of the tv channel [/struct_sep0] [struct_sep1] that is playing some cartoons [/struct_sep1] [struct_sep2] written by Todd Casey ? [/struct_sep2] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.series_name , tv_channel.Country from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] Find the series name and country of the tv channel [/struct_sep0] [struct_sep1] that is playing some cartoons [/struct_sep1] [struct_sep2] written by Todd Casey ? [/struct_sep2] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.series_name , tv_channel.Country from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] What is the series name and country of all TV channels [/struct_sep0] [struct_sep1] that are playing cartoons [/struct_sep1] [struct_sep2] written by Todd Casey ? [/struct_sep2] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.series_name , tv_channel.Country from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] What is the series name and country of all TV channels [/struct_sep0] [struct_sep1] that are playing cartoons [/struct_sep1] [struct_sep2] written by Todd Casey ? [/struct_sep2] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.series_name , tv_channel.Country from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] find the pixel aspect ratio and nation of the tv channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] find the pixel aspect ratio and nation of the tv channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] find the pixel aspect ratio and nation of the tv channels [/struct_sep0] [struct_sep1] using language English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] find the pixel aspect ratio and nation of the tv channels [/struct_sep0] [struct_sep1] use the English language ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] find the pixel aspect ratio and nation of the tv channels [/struct_sep0] [struct_sep1] that has high definition TV . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] find the pixel aspect ratio and nation of the tv channels [/struct_sep0] [struct_sep1] are playing some cartoon written by Todd Casey ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] find the pixel aspect ratio and nation of the tv channels [/struct_sep0] [struct_sep1] that do not have any cartoons directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  except_  @.@ is cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] find the pixel aspect ratio and nation of the tv channels [/struct_sep0] [struct_sep1] that do not have any cartoon directed by Ben Jones . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  @.@ not in cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] What is the pixel aspect ratio and country of origin for all TV channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What is the pixel aspect ratio and country of origin for all TV channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What is the pixel aspect ratio and country of origin for all TV channels [/struct_sep0] [struct_sep1] that has high definition TV . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] What is the pixel aspect ratio and country of origin for all TV channels [/struct_sep0] [struct_sep1] are playing some cartoon written by Todd Casey ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] What is the pixel aspect ratio and country of origin for all TV channels [/struct_sep0] [struct_sep1] that do not have any cartoons directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  except_  @.@ is cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] What is the pixel aspect ratio and country of origin for all TV channels [/struct_sep0] [struct_sep1] that do not have any cartoon directed by Ben Jones . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Pixel_aspect_ratio_PAR , tv_channel.Country from tv_channel  where  @.@ not in cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] find id of the tv channels that [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] find id of the tv channels that [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] find id of the tv channels that [/struct_sep0] [struct_sep1] using language English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] find id of the tv channels that [/struct_sep0] [struct_sep1] use the English language ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are the ids of all tv channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What are the ids of all tv channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What are the ids of all tv channels [/struct_sep0] [struct_sep1] that has high definition TV . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] What are the ids of all tv channels [/struct_sep0] [struct_sep1] are playing some cartoon written by Todd Casey ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] What are the ids of all tv channels [/struct_sep0] [struct_sep1] that do not use English . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What are the ids of all tv channels [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What are the ids of all tv channels [/struct_sep0] [struct_sep1] that do not have any cartoons directed by Ben Jones ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  except_  @.@ is cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] What are the ids of all tv channels [/struct_sep0] [struct_sep1] that do not have any cartoon directed by Ben Jones . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by ( Ben Jones ), written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  @.@ not in cartoon.*  and  cartoon.Directed_by = \"Ben Jones\" "
    },
    {
        "input": "[struct_sep0] What are the ids of the TV channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What are the ids of the TV channels [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] What are the ids of the TV channels [/struct_sep0] [struct_sep1] that has high definition TV . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] What are the ids of the TV channels [/struct_sep0] [struct_sep1] are playing some cartoon written by Todd Casey ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] What are the ids of the TV channels [/struct_sep0] [struct_sep1] that do not use English . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What are the ids of the TV channels [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.id from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] find the package option of the tv channel [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] find the package option of the tv channel [/struct_sep0] [struct_sep1] with serial name ' Sky Radio ' ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name ( Sky Radio ), country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.series_name = \"Sky Radio\" "
    },
    {
        "input": "[struct_sep0] find the package option of the tv channel [/struct_sep0] [struct_sep1] using language English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] find the package option of the tv channel [/struct_sep0] [struct_sep1] use the English language ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] find the package option of the tv channel [/struct_sep0] [struct_sep1] that has high definition TV . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.Hight_definition_TV = \"yes\" "
    },
    {
        "input": "[struct_sep0] find the package option of the tv channel [/struct_sep0] [struct_sep1] are playing some cartoon written by Todd Casey ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language, content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by ( Todd Casey ), original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  cartoon.Written_by = \"Todd Casey\" "
    },
    {
        "input": "[struct_sep0] find the package option of the tv channel [/struct_sep0] [struct_sep1] that do not use English . [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] find the package option of the tv channel [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | tvshow | tv _ channel : id, series _ name, country, language ( English ), content, pixel _ aspect _ ratio _ par, hight _ definition _ tv, pay _ per _ view _ ppv, package _ option ( Option ) | tv _ series : id, episode, air _ date, rating, share, 18 _ 49 _ rating _ share, viewers _ m, weekly _ rank, channel | cartoon : id, title, directed _ by, written _ by, original _ air _ date, production _ code, channel",
        "gold_natsql": "select tv_channel.Package_Option from tv_channel  where  tv_channel.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What is the money rank of the poker player [/struct_sep0] [struct_sep1] with earnings less than 200000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] What is the money rank of the poker player [/struct_sep0] [struct_sep1] who have earnings below 200000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] What is the money rank of the poker player [/struct_sep0] [struct_sep1] with height higher than 200 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] What is the money rank of the poker player [/struct_sep0] [struct_sep1] who are taller than 200 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] Return the money rank of the player [/struct_sep0] [struct_sep1] with earnings less than 200000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] Return the money rank of the player [/struct_sep0] [struct_sep1] who have earnings below 200000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] Return the money rank of the player [/struct_sep0] [struct_sep1] with height higher than 200 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] Return the money rank of the player [/struct_sep0] [struct_sep1] who are taller than 200 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] What is the maximum number of final tables made among poker players [/struct_sep0] [struct_sep1] with height higher than 200 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select max ( poker_player.Final_Table_Made )  from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] What is the maximum number of final tables made among poker players [/struct_sep0] [struct_sep1] who are taller than 200 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select max ( poker_player.Final_Table_Made )  from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] Return the maximum final tables made across all poker players [/struct_sep0] [struct_sep1] with height higher than 200 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select max ( poker_player.Final_Table_Made )  from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] Return the maximum final tables made across all poker players [/struct_sep0] [struct_sep1] who are taller than 200 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select max ( poker_player.Final_Table_Made )  from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] What is the birth date of the poker player [/struct_sep0] [struct_sep1] whose earnings is higher than 300000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Birth_Date from poker_player  where  poker_player.Earnings > 300000 "
    },
    {
        "input": "[struct_sep0] What is the birth date of the poker player [/struct_sep0] [struct_sep1] who have earnings above 300000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Birth_Date from poker_player  where  poker_player.Earnings > 300000 "
    },
    {
        "input": "[struct_sep0] Return the birth date of the poker player [/struct_sep0] [struct_sep1] whose earnings is higher than 300000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Birth_Date from poker_player  where  poker_player.Earnings > 300000 "
    },
    {
        "input": "[struct_sep0] Return the birth date of the poker player [/struct_sep0] [struct_sep1] who have earnings above 300000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Birth_Date from poker_player  where  poker_player.Earnings > 300000 "
    },
    {
        "input": "[struct_sep0] Return the money rank of the poker player [/struct_sep0] [struct_sep1] with the highest earnings ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  order by poker_player.Earnings desc limit 1"
    },
    {
        "input": "[struct_sep0] Return the money rank of the poker player [/struct_sep0] [struct_sep1] with the greatest earnings . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  order by poker_player.Earnings desc limit 1"
    },
    {
        "input": "[struct_sep0] Return the money rank of the poker player [/struct_sep0] [struct_sep1] with earnings less than 200000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] Return the money rank of the poker player [/struct_sep0] [struct_sep1] who have earnings below 200000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] Return the money rank of the poker player [/struct_sep0] [struct_sep1] with height higher than 200 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] Return the money rank of the poker player [/struct_sep0] [struct_sep1] who are taller than 200 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select poker_player.Money_Rank from poker_player  where  people.Height > 200 "
    },
    {
        "input": "[struct_sep0] What is the average earnings of poker players [/struct_sep0] [struct_sep1] with earnings less than 200000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select avg ( poker_player.Earnings )  from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] What is the average earnings of poker players [/struct_sep0] [struct_sep1] who have earnings below 200000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select avg ( poker_player.Earnings )  from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] Give average earnings of poker players [/struct_sep0] [struct_sep1] with earnings less than 200000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select avg ( poker_player.Earnings )  from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] Give average earnings of poker players [/struct_sep0] [struct_sep1] who have earnings below 200000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select avg ( poker_player.Earnings )  from poker_player  where  poker_player.Earnings < 200000 "
    },
    {
        "input": "[struct_sep0] What are the names of poker players [/struct_sep0] [struct_sep1] whose earnings is higher than 300000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  poker_player.Earnings > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of poker players [/struct_sep0] [struct_sep1] who have earnings above 300000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  poker_player.Earnings > 300000 "
    },
    {
        "input": "[struct_sep0] Return the names of poker players [/struct_sep0] [struct_sep1] whose earnings is higher than 300000 ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  poker_player.Earnings > 300000 "
    },
    {
        "input": "[struct_sep0] Return the names of poker players [/struct_sep0] [struct_sep1] who have earnings above 300000 . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  poker_player.Earnings > 300000 "
    },
    {
        "input": "[struct_sep0] Give the nationality [/struct_sep0] [struct_sep1] that are shared by at least two people ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Nationality from poker_player  where  count ( people.* )  >= 2  group by people.Nationality "
    },
    {
        "input": "[struct_sep0] Give the nationality [/struct_sep0] [struct_sep1] for which there are two or more people . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Nationality from poker_player  where  count ( people.* )  >= 2  group by people.Nationality "
    },
    {
        "input": "[struct_sep0] Give the nationality [/struct_sep0] [struct_sep1] in ascending alphabetical order of name . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Nationality from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] Give the nationality [/struct_sep0] [struct_sep1] ordered by their names in alphabetical order ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Nationality from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] What are the nationalities [/struct_sep0] [struct_sep1] in ascending alphabetical order of name . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Nationality from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] Return the nationalities [/struct_sep0] [struct_sep1] in ascending alphabetical order of name . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Nationality from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] Return the nationalities [/struct_sep0] [struct_sep1] ordered by their names in alphabetical order ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Nationality from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] List the names and birth dates of people [/struct_sep0] [struct_sep1] whose nationality is not ' Russia ' . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality ( Russia ), name, birth _ date, height",
        "gold_natsql": "select people.Name , people.Birth_Date from poker_player  where  people.Nationality != \"Russia\" "
    },
    {
        "input": "[struct_sep0] List the names and birth dates of people [/struct_sep0] [struct_sep1] who are not from Russia ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality ( Russia ), name, birth _ date, height",
        "gold_natsql": "select people.Name , people.Birth_Date from poker_player  where  people.Nationality != \"Russia\" "
    },
    {
        "input": "[struct_sep0] List the names and birth dates of people [/struct_sep0] [struct_sep1] that are not poker players . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name , people.Birth_Date from poker_player  where  @.@ not in poker_player.* "
    },
    {
        "input": "[struct_sep0] List the names and birth dates of people [/struct_sep0] [struct_sep1] who do not play poker ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name , people.Birth_Date from poker_player  where  @.@ not in poker_player.* "
    },
    {
        "input": "[struct_sep0] Show names of people [/struct_sep0] [struct_sep1] in ascending alphabetical order of name . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] Show names of people [/struct_sep0] [struct_sep1] ordered by their names in alphabetical order ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] Show names of people [/struct_sep0] [struct_sep1] that are not poker players . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  @.@ not in poker_player.* "
    },
    {
        "input": "[struct_sep0] Show names of people [/struct_sep0] [struct_sep1] who do not play poker ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  @.@ not in poker_player.* "
    },
    {
        "input": "[struct_sep0] What are the names of people [/struct_sep0] [struct_sep1] in ascending alphabetical order of name . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] What are the names of people [/struct_sep0] [struct_sep1] that are not poker players . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  @.@ not in poker_player.* "
    },
    {
        "input": "[struct_sep0] What are the names of people [/struct_sep0] [struct_sep1] who do not play poker ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  @.@ not in poker_player.* "
    },
    {
        "input": "[struct_sep0] List the names of people [/struct_sep0] [struct_sep1] in ascending alphabetical order of name . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] List the names of people [/struct_sep0] [struct_sep1] ordered by their names in alphabetical order ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] List the names of people [/struct_sep0] [struct_sep1] whose nationality is not ' Russia ' . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality ( Russia ), name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  people.Nationality != \"Russia\" "
    },
    {
        "input": "[struct_sep0] List the names of people [/struct_sep0] [struct_sep1] who are not from Russia ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality ( Russia ), name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  people.Nationality != \"Russia\" "
    },
    {
        "input": "[struct_sep0] What are the names of people [/struct_sep0] [struct_sep1] in ascending alphabetical order of name . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality, name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  order by people.Name asc"
    },
    {
        "input": "[struct_sep0] What are the names of people [/struct_sep0] [struct_sep1] whose nationality is not ' Russia ' . [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality ( Russia ), name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  people.Nationality != \"Russia\" "
    },
    {
        "input": "[struct_sep0] What are the names of people [/struct_sep0] [struct_sep1] who are not from Russia ? [/struct_sep1] | poker _ player | poker _ player : poker _ player _ id, people _ id, final _ table _ made, best _ finish, money _ rank, earnings | people : people _ id, nationality ( Russia ), name, birth _ date, height",
        "gold_natsql": "select people.Name from poker_player  where  people.Nationality != \"Russia\" "
    },
    {
        "input": "[struct_sep0] What is last date created of votes [/struct_sep0] [struct_sep1] that were for the contestant named ' Tabatha Gehling ' ? [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name ( Tabatha Gehling ) | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select max ( votes.created )  from area_code_state  where  contestants.contestant_name = \"Tabatha Gehling\" "
    },
    {
        "input": "[struct_sep0] What are the names of the contestants [/struct_sep0] [struct_sep1] did not get voted ? [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_name from area_code_state  where  @.@ not in votes.* "
    },
    {
        "input": "[struct_sep0] What are the names of the contestants [/struct_sep0] [struct_sep1] whose names contain the substring ' Al ' . [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state ( AL ) | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_name from area_code_state  where  contestants.contestant_name like \"%Al%\" "
    },
    {
        "input": "[struct_sep0] What are the contestant numbers and names of the contestants [/struct_sep0] [struct_sep1] whose names are not ' Jessie Alloway ' [/struct_sep1] | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name ( Jessie Alloway ) | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_number , contestants.contestant_name from area_code_state  where  contestants.contestant_name != \"Jessie Alloway\" "
    },
    {
        "input": "[struct_sep0] What are the contestant numbers and names of the contestants [/struct_sep0] [struct_sep1] did not get voted ? [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_number , contestants.contestant_name from area_code_state  where  @.@ not in votes.* "
    },
    {
        "input": "[struct_sep0] What are the contestant numbers and names of the contestants [/struct_sep0] [struct_sep1] whose names contain the substring ' Al ' . [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state ( AL ) | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_number , contestants.contestant_name from area_code_state  where  contestants.contestant_name like \"%Al%\" "
    },
    {
        "input": "[struct_sep0] Of all the contestants who got voted [/struct_sep0] [struct_sep1] , what is the contestant number and name of the contestant [/struct_sep1] [struct_sep2] whose names are not ' Jessie Alloway ' [/struct_sep2] | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name ( Jessie Alloway ) | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_number , contestants.contestant_name from area_code_state  where  @ join votes.*  and  contestants.contestant_name != \"Jessie Alloway\" "
    },
    {
        "input": "[struct_sep0] Of all the contestants who got voted [/struct_sep0] [struct_sep1] , what is the contestant number and name of the contestant [/struct_sep1] [struct_sep2] who had at least two votes ? [/struct_sep2] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_number , contestants.contestant_name from area_code_state  where  @ join votes.*  and  count ( votes.* )  >= 2 "
    },
    {
        "input": "[struct_sep0] Of all the contestants who got voted [/struct_sep0] [struct_sep1] , what is the contestant number and name of the contestant [/struct_sep1] [struct_sep2] did not get voted ? [/struct_sep2] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_number , contestants.contestant_name from area_code_state  where  @ join votes.*  and  @.@ not in votes.* "
    },
    {
        "input": "[struct_sep0] Of all the contestants who got voted [/struct_sep0] [struct_sep1] , what is the contestant number and name of the contestant [/struct_sep1] [struct_sep2] whose names contain the substring ' Al ' . [/struct_sep2] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_number , contestants.contestant_name from area_code_state  where  @ join votes.*  and  contestants.contestant_name like \"%Al%\" "
    },
    {
        "input": "[struct_sep0] What are the number of votes [/struct_sep0] [struct_sep1] that were for the contestant named ' Tabatha Gehling ' ? [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name ( Tabatha Gehling ) | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select count ( votes.* )  from area_code_state  where  contestants.contestant_name = \"Tabatha Gehling\" "
    },
    {
        "input": "[struct_sep0] How many contestants [/struct_sep0] [struct_sep1] whose names are not ' Jessie Alloway ' [/struct_sep1] | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name ( Jessie Alloway ) | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select count ( contestants.* )  from area_code_state  where  contestants.contestant_name != \"Jessie Alloway\" "
    },
    {
        "input": "[struct_sep0] How many contestants [/struct_sep0] [struct_sep1] whose names contain the substring ' Al ' . [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state ( AL ) | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select count ( contestants.* )  from area_code_state  where  contestants.contestant_name like \"%Al%\" "
    },
    {
        "input": "[struct_sep0] What is the area code [/struct_sep0] [struct_sep1] in which voters voted both for the contestant ' Tabatha Gehling ' and [/struct_sep1] [struct_sep2] the contestant ' Kelly Clauss ' . [/struct_sep2] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name ( Tabatha Gehling, Kelly Clauss ) | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select area_code_state.area_code from area_code_state  where  contestants.contestant_name = \"Tabatha Gehling\"  and  contestants.contestant_name = \"Kelly Clauss\" "
    },
    {
        "input": "[struct_sep0] What are the create dates , states , and phone numbers of the votes [/struct_sep0] [struct_sep1] from the state ' CA ' ? [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state ( CA ) | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state ( CA ), contestant _ number, created",
        "gold_natsql": "select votes.created , votes.state , votes.phone_number from area_code_state  where  votes.state = \"CA\" "
    },
    {
        "input": "[struct_sep0] What are the create dates , states , and phone numbers of the votes [/struct_sep0] [struct_sep1] from state ' NY ' or ' CA ' ? [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state ( NY, CA ) | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state ( NY, CA ), contestant _ number, created",
        "gold_natsql": "select votes.created , votes.state , votes.phone_number from area_code_state  where  votes.state = \"NY\"  or  votes.state = \"CA\" "
    },
    {
        "input": "[struct_sep0] Return the names of the contestants [/struct_sep0] [struct_sep1] ordered by contestant name descending . [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_name from area_code_state  order by contestants.contestant_name desc"
    },
    {
        "input": "[struct_sep0] Return the names of the contestants [/struct_sep0] [struct_sep1] whose names are not ' Jessie Alloway ' [/struct_sep1] | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name ( Jessie Alloway ) | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_name from area_code_state  where  contestants.contestant_name != \"Jessie Alloway\" "
    },
    {
        "input": "[struct_sep0] Return the names of the contestants [/struct_sep0] [struct_sep1] did not get voted ? [/struct_sep1] | voter _ 1 | area _ code _ state : area _ code, state | contestants : contestant _ number, contestant _ name | votes : vote _ id, phone _ number, state, contestant _ number, created",
        "gold_natsql": "select contestants.contestant_name from area_code_state  where  @.@ not in votes.* "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of all the countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] whose government is US Territory ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] which are considered US Territory . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] that use English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] speak both English and French ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] that speak both English and French . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] where both English and French are official languages ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  and  countrylanguage.Language = \"French\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Give the names of the nations [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How much surface area [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What is the continent name [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which language [/struct_sep0] [struct_sep1] is the most popular [/struct_sep1] [struct_sep2] on the Asia continent ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.Continent = \"Asia\"  order by countrylanguage.Percentage desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the population and life expectancies [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average expected life expectancy for countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How long is the people 's average life expectancy [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Caribbean\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Brazil\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] with the lowest life expectancy . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] with the largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] with the smallest population ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] with the largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] with the top 5 largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] with the top 3 largest population ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] with the 3 lowest populations ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What is the name of country [/struct_sep0] [struct_sep1] that has the shortest life expectancy [/struct_sep1] [struct_sep2] with the fewest people . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] and Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] with the largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] with the smallest population ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] with the largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] with the top 5 largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] with the top 3 largest population ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] with the 3 lowest populations ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name of the country [/struct_sep0] [struct_sep1] in Asia [/struct_sep1] [struct_sep2] with the fewest people . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total population and maximum GNP [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , max ( country.GNP )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] that became independent after 1950 ? [/struct_sep2] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] are in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average life expectancy [/struct_sep0] [struct_sep1] in Africa countries [/struct_sep1] [struct_sep2] in Asia . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the average life expectancy for countries [/struct_sep0] [struct_sep1] in Africa [/struct_sep1] [struct_sep2] in Asia . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the continents Asia [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the continents Asia [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the continents Asia [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the continents Asia [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the continents Asia [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the continents Asia [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total surface area of the continents Asia [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Give the total surface area covered by countries [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.SurfaceArea )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] that were founded after 1950 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] that use English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] speak both English and French ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] that speak both English and French . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the average GNP and total population in all nations [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] that were founded after 1950 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] that use English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] speak both English and French ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] that speak both English and French . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Give the mean GNP and total population of nations [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.GNP )  , sum ( country.Population )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many type of governments are [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many different forms of governments [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct country.GovernmentForm )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total number of languages [/struct_sep0] [struct_sep1] used in the country the name of whose head of state is Beatrix . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( countrylanguage.Language )  from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] How many languages [/struct_sep0] [struct_sep1] used in the country the name of whose head of state is Beatrix . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( countrylanguage.Language )  from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is name of the country [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] that were founded after 1950 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] whose government is US Territory ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] which are considered US Territory . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] does Afghanistan have ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Afghanistan\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] are spoken in Afghanistan ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Afghanistan\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] that use English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] speak both English and French ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] that speak both English and French . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] where both English and French are official languages ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  and  countrylanguage.Language = \"French\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] do not have Republic for governments . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm != \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the name of the nation [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Which continent [/struct_sep0] [struct_sep1] where Chinese is spoken ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  countrylanguage.Language = \"Chinese\" "
    },
    {
        "input": "[struct_sep0] Which continent [/struct_sep0] [struct_sep1] speak Chinese ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  countrylanguage.Language = \"Chinese\" "
    },
    {
        "input": "[struct_sep0] Which continent [/struct_sep0] [struct_sep1] where the average life expectancy is shorter than 72 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  avg ( country.LifeExpectancy )  < 72 "
    },
    {
        "input": "[struct_sep0] Which continent [/struct_sep0] [struct_sep1] where Chinese is spoken ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  countrylanguage.Language = \"Chinese\" "
    },
    {
        "input": "[struct_sep0] Which continent [/struct_sep0] [struct_sep1] speak Chinese ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  countrylanguage.Language = \"Chinese\" "
    },
    {
        "input": "[struct_sep0] Which continent [/struct_sep0] [struct_sep1] where the average life expectancy is shorter than 72 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Continent from city  where  avg ( country.LifeExpectancy )  < 72 "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the number of nations [/struct_sep0] [struct_sep1] that were founded after 1950 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What is the number of nations [/struct_sep0] [struct_sep1] whose government is US Territory ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What is the number of nations [/struct_sep0] [struct_sep1] which are considered US Territory . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What are the names of nations [/struct_sep0] [struct_sep1] that were founded after 1950 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What are the names of nations [/struct_sep0] [struct_sep1] whose government is US Territory ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What are the names of nations [/struct_sep0] [struct_sep1] which are considered US Territory . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What are the names of nations [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the names of nations [/struct_sep0] [struct_sep1] that were founded after 1950 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Give the names of nations [/struct_sep0] [struct_sep1] whose government is US Territory ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] Give the names of nations [/struct_sep0] [struct_sep1] which are considered US Territory . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] Give the names of nations [/struct_sep0] [struct_sep1] does Afghanistan have ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Afghanistan\" "
    },
    {
        "input": "[struct_sep0] Give the names of nations [/struct_sep0] [struct_sep1] are spoken in Afghanistan ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Afghanistan ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Afghanistan\" "
    },
    {
        "input": "[struct_sep0] Give the names of nations [/struct_sep0] [struct_sep1] do not have Republic for governments . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm != \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the names of nations [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names of nations [/struct_sep0] [struct_sep1] that were founded after 1950 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What are the names of nations [/struct_sep0] [struct_sep1] whose government is US Territory ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What are the names of nations [/struct_sep0] [struct_sep1] which are considered US Territory . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What are the names of nations [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] with English and [/struct_sep1] [struct_sep2] whose government forms are not Republic ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  country.GovernmentForm != \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] with English and [/struct_sep1] [struct_sep2] do not have Republic for governments . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  country.GovernmentForm != \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] with English and [/struct_sep1] [struct_sep2] have a population of 80000 ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] with English and [/struct_sep1] [struct_sep2] have a population equal to 80000 . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.* from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which language [/struct_sep0] [struct_sep1] is the most popular [/struct_sep1] [struct_sep2] in Aruba ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.Name = \"Aruba\"  group by countrylanguage.Language  order by count ( country.* )  desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the language [/struct_sep0] [struct_sep1] used in Aruba ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.Name = \"Aruba\" "
    },
    {
        "input": "[struct_sep0] What is the language [/struct_sep0] [struct_sep1] are spoken in Aruba ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.Name = \"Aruba\" "
    },
    {
        "input": "[struct_sep0] What is the language [/struct_sep0] [struct_sep1] used in the country the name of whose head of state is Beatrix . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] Which languages [/struct_sep0] [struct_sep1] are spoken by only one country [/struct_sep1] [struct_sep2] whose head of state is Beatrix ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  count ( country.* )  = 1  and  country.HeadOfState = \"Beatrix\"  group by countrylanguage.Language "
    },
    {
        "input": "[struct_sep0] Which languages [/struct_sep0] [struct_sep1] are spoken by only one country [/struct_sep1] [struct_sep2] that are founded before 1930 ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  count ( country.* )  = 1  and  country.IndepYear < 1930  group by countrylanguage.Language "
    },
    {
        "input": "[struct_sep0] Which languages [/struct_sep0] [struct_sep1] are spoken by only one country [/struct_sep1] [struct_sep2] where people use languages other than English ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  count ( country.* )  = 1  and  countrylanguage.Language != \"English\"  group by countrylanguage.Language "
    },
    {
        "input": "[struct_sep0] Which languages [/struct_sep0] [struct_sep1] are spoken by only one country [/struct_sep1] [struct_sep2] in which people speak langauges [/struct_sep2] [struct_sep3] that are not English . [/struct_sep3] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  count ( country.* )  = 1  and  countrylanguage.Language != \"English\"  group by countrylanguage.Language "
    },
    {
        "input": "[struct_sep0] What languages [/struct_sep0] [struct_sep1] are only used by a single country [/struct_sep1] [struct_sep2] whose head of state is Beatrix ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  count ( country.* )  = 1  and  country.HeadOfState = \"Beatrix\"  group by countrylanguage.Language "
    },
    {
        "input": "[struct_sep0] What languages [/struct_sep0] [struct_sep1] are only used by a single country [/struct_sep1] [struct_sep2] that are founded before 1930 ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  count ( country.* )  = 1  and  country.IndepYear < 1930  group by countrylanguage.Language "
    },
    {
        "input": "[struct_sep0] What languages [/struct_sep0] [struct_sep1] are only used by a single country [/struct_sep1] [struct_sep2] where people use languages other than English ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  count ( country.* )  = 1  and  countrylanguage.Language != \"English\"  group by countrylanguage.Language "
    },
    {
        "input": "[struct_sep0] What languages [/struct_sep0] [struct_sep1] are only used by a single country [/struct_sep1] [struct_sep2] in which people speak langauges [/struct_sep2] [struct_sep3] that are not English . [/struct_sep3] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  count ( country.* )  = 1  and  countrylanguage.Language != \"English\"  group by countrylanguage.Language "
    },
    {
        "input": "[struct_sep0] What is the most populace city [/struct_sep0] [struct_sep1] whose population is between 160000 and 900000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select city.Name from city  where  city.Population between 160000 and 900000  order by city.Population desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the most populace city [/struct_sep0] [struct_sep1] that have a population between 160000 and 900000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select city.Name from city  where  city.Population between 160000 and 900000  order by city.Population desc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Find the name , population and expected life length of Asia country [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.LifeExpectancy from city  where  country.Continent = \"Asia\"  and  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is average life expectancy in the countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Give the mean life expectancy of countries [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select avg ( country.LifeExpectancy )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] that were founded after 1950 . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] have a Republic as their form of government ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] have governments that are Republic ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] do the countires in the Caribbean cover together ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Asia or Europe . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] whose government is US Territory ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] which are considered US Territory . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] are there in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] are in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] in Asia . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] have a population of 80000 ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What is the total number of people [/struct_sep0] [struct_sep1] living in the nations [/struct_sep1] [struct_sep2] have a population equal to 80000 . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] How many people live in countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the official language spoken in the country [/struct_sep0] [struct_sep1] in Republic governments ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  countrylanguage.IsOfficial = \"T\"  and  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the official language spoken in the country [/struct_sep0] [struct_sep1] with a Republic government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  countrylanguage.IsOfficial = \"T\"  and  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the official language spoken in the country [/struct_sep0] [struct_sep1] that are founded before 1930 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  countrylanguage.IsOfficial = \"T\"  and  country.IndepYear < 1930 "
    },
    {
        "input": "[struct_sep0] What is the official language spoken in the country [/struct_sep0] [struct_sep1] where people use languages other than English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  countrylanguage.IsOfficial = \"T\"  and  countrylanguage.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What is the official language spoken in the country [/struct_sep0] [struct_sep1] in which people speak langauges [/struct_sep1] [struct_sep2] that are not English . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  countrylanguage.IsOfficial = \"T\"  and  countrylanguage.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What is the official language [/struct_sep0] [struct_sep1] used in Aruba ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  countrylanguage.IsOfficial = \"T\"  and  country.Name = \"Aruba\" "
    },
    {
        "input": "[struct_sep0] What is the official language [/struct_sep0] [struct_sep1] are spoken in Aruba ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  countrylanguage.IsOfficial = \"T\"  and  country.Name = \"Aruba\" "
    },
    {
        "input": "[struct_sep0] What is the total number of unique official languages spoken in the countries [/struct_sep0] [struct_sep1] in Republic governments ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct countrylanguage.Language )  from city  where  countrylanguage.IsOfficial = \"T\"  and  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the total number of unique official languages spoken in the countries [/struct_sep0] [struct_sep1] with a Republic government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct countrylanguage.Language )  from city  where  countrylanguage.IsOfficial = \"T\"  and  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What is the total number of unique official languages spoken in the countries [/struct_sep0] [struct_sep1] whose head of state is Beatrix ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count (  distinct countrylanguage.Language )  from city  where  countrylanguage.IsOfficial = \"T\"  and  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] What is the total number of unique official languages spoken in the countries [/struct_sep0] [struct_sep1] where people use languages other than English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count (  distinct countrylanguage.Language )  from city  where  countrylanguage.IsOfficial = \"T\"  and  countrylanguage.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What is the total number of unique official languages spoken in the countries [/struct_sep0] [struct_sep1] in which people speak langauges [/struct_sep1] [struct_sep2] that are not English . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count (  distinct countrylanguage.Language )  from city  where  countrylanguage.IsOfficial = \"T\"  and  countrylanguage.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the countries [/struct_sep0] [struct_sep1] that have greater surface area than any country [/struct_sep1] [struct_sep2] in Asia . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Which countries [/struct_sep0] [struct_sep1] have greater area than that of any country [/struct_sep1] [struct_sep2] in Asia . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ > min ( country.SurfaceArea )   and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the Africa countries [/struct_sep0] [struct_sep1] that have a population less than any country [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < max ( country.Population )   and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the Africa countries [/struct_sep0] [struct_sep1] that have a population less than any country [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < max ( country.Population )   and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the Africa countries [/struct_sep0] [struct_sep1] that have a population less than any country [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < max ( country.Population )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the Africa countries [/struct_sep0] [struct_sep1] that have a population less than any country [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < max ( country.Population )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the Africa countries [/struct_sep0] [struct_sep1] that have a population less than any country [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < max ( country.Population )   and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the Africa countries [/struct_sep0] [struct_sep1] that have a population less than any country [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < max ( country.Population )   and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Which Africa countries [/struct_sep0] [struct_sep1] have a smaller population than that of any country [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < min ( country.Population )   and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Which Africa countries [/struct_sep0] [struct_sep1] have a smaller population than that of any country [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < min ( country.Population )   and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Which Africa countries [/struct_sep0] [struct_sep1] have a smaller population than that of any country [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < min ( country.Population )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Which Africa countries [/struct_sep0] [struct_sep1] have a smaller population than that of any country [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < min ( country.Population )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Which Africa countries [/struct_sep0] [struct_sep1] have a smaller population than that of any country [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < min ( country.Population )   and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Which Africa countries [/struct_sep0] [struct_sep1] have a smaller population than that of any country [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\"  and  @.@ < min ( country.Population )   and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Which Asia countries [/struct_sep0] [struct_sep1] have a population that is larger than any country [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > max ( country.Population )   and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Which Asia countries [/struct_sep0] [struct_sep1] have a population that is larger than any country [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > max ( country.Population )   and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Which Asia countries [/struct_sep0] [struct_sep1] have a population that is larger than any country [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > max ( country.Population )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Which Asia countries [/struct_sep0] [struct_sep1] have a population that is larger than any country [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > max ( country.Population )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Which Asia countries [/struct_sep0] [struct_sep1] have a population that is larger than any country [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > max ( country.Population )   and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Which Asia countries [/struct_sep0] [struct_sep1] have a population that is larger than any country [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > max ( country.Population )   and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the Asia countries [/struct_sep0] [struct_sep1] which have a population larger than that of any country [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > min ( country.Population )   and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the Asia countries [/struct_sep0] [struct_sep1] which have a population larger than that of any country [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > min ( country.Population )   and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the Asia countries [/struct_sep0] [struct_sep1] which have a population larger than that of any country [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > min ( country.Population )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the Asia countries [/struct_sep0] [struct_sep1] which have a population larger than that of any country [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Asia ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > min ( country.Population )   and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the Asia countries [/struct_sep0] [struct_sep1] which have a population larger than that of any country [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > min ( country.Population )   and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the Asia countries [/struct_sep0] [struct_sep1] which have a population larger than that of any country [/struct_sep1] [struct_sep2] in Europe ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  and  @.@ > min ( country.Population )   and  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the country codes for countries [/struct_sep0] [struct_sep1] in Republic governments ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the country codes for countries [/struct_sep0] [struct_sep1] with a Republic government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the country codes for countries [/struct_sep0] [struct_sep1] whose head of state is Beatrix ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] What are the country codes for countries [/struct_sep0] [struct_sep1] that are founded before 1930 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  country.IndepYear < 1930 "
    },
    {
        "input": "[struct_sep0] What are the country codes for countries [/struct_sep0] [struct_sep1] where people use languages other than English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  countrylanguage.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What are the country codes for countries [/struct_sep0] [struct_sep1] in which people speak langauges [/struct_sep1] [struct_sep2] that are not English . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  countrylanguage.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] Return the country codes for countries [/struct_sep0] [struct_sep1] in Republic governments ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Return the country codes for countries [/struct_sep0] [struct_sep1] with a Republic government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Return the country codes for countries [/struct_sep0] [struct_sep1] whose head of state is Beatrix ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] Return the country codes for countries [/struct_sep0] [struct_sep1] that are founded before 1930 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  country.IndepYear < 1930 "
    },
    {
        "input": "[struct_sep0] Return the country codes for countries [/struct_sep0] [struct_sep1] where people use languages other than English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  countrylanguage.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] Return the country codes for countries [/struct_sep0] [struct_sep1] in which people speak langauges [/struct_sep1] [struct_sep2] that are not English . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select countrylanguage.CountryCode from city  where  countrylanguage.Language != \"English\" "
    },
    {
        "input": "[struct_sep0] What are the country codes of countries [/struct_sep0] [struct_sep1] in Republic governments ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the country codes of countries [/struct_sep0] [struct_sep1] with a Republic government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the country codes of countries [/struct_sep0] [struct_sep1] whose head of state is Beatrix ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] What are the country codes of countries [/struct_sep0] [struct_sep1] that are founded before 1930 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  country.IndepYear < 1930 "
    },
    {
        "input": "[struct_sep0] What are the country codes of countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  except_  @.@ is countrylanguage.*  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are the country codes of countries [/struct_sep0] [struct_sep1] that do not speak English . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  except_  @.@ is countrylanguage.*  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Give the country codes for countries [/struct_sep0] [struct_sep1] in Republic governments ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the country codes for countries [/struct_sep0] [struct_sep1] with a Republic government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the country codes for countries [/struct_sep0] [struct_sep1] whose head of state is Beatrix ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] Give the country codes for countries [/struct_sep0] [struct_sep1] that are founded before 1930 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  country.IndepYear < 1930 "
    },
    {
        "input": "[struct_sep0] Give the country codes for countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  except_  @.@ is countrylanguage.*  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Give the country codes for countries [/struct_sep0] [struct_sep1] that do not speak English . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select  distinct countrylanguage.CountryCode from city  where  except_  @.@ is countrylanguage.*  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are the codes of the countries [/struct_sep0] [struct_sep1] that do not speak English and [/struct_sep1] [struct_sep2] French as official languages . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Code from city  where  countrylanguage.Language != \"English\"  and  countrylanguage.Language = \"French\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the codes of the countries [/struct_sep0] [struct_sep1] that do not speak English and [/struct_sep1] [struct_sep2] have a population of 80000 ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Code from city  where  countrylanguage.Language != \"English\"  and  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What are the codes of the countries [/struct_sep0] [struct_sep1] that do not speak English and [/struct_sep1] [struct_sep2] have a population equal to 80000 . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Code from city  where  countrylanguage.Language != \"English\"  and  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Return the codes of countries [/struct_sep0] [struct_sep1] that do not speak English and [/struct_sep1] [struct_sep2] French as official languages . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Code from city  where  countrylanguage.Language != \"English\"  and  countrylanguage.Language = \"French\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Return the codes of countries [/struct_sep0] [struct_sep1] that do not speak English and [/struct_sep1] [struct_sep2] have a population of 80000 ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Code from city  where  countrylanguage.Language != \"English\"  and  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Return the codes of countries [/struct_sep0] [struct_sep1] that do not speak English and [/struct_sep1] [struct_sep2] have a population equal to 80000 . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Code from city  where  countrylanguage.Language != \"English\"  and  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the name , Independence year , and surface area of the country [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Give the name , year of Independence , and surface area of the country [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea , country.IndepYear from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the population , name and leader of the country [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Give the name , population , and head of state for the country [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.Population , country.HeadOfState from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Region = \"Caribbean\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Name = \"Brazil\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Region = \"Central Africa\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Region = \"Central Africa\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Asia\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Asia\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Africa\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Europe\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Europe\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Asia\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Asia\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Africa\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Africa\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] What are the different government forms and what is the total population of each for government forms [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , country.GovernmentForm from city  where  country.Continent = \"Asia\"  group by country.GovernmentForm "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.GovernmentForm = \"Republic\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.GovernmentForm = \"Republic\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Region = \"Caribbean\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Region = \"Caribbean\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Name = \"Brazil\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Region = \"Central Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Region = \"Central Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] where Chinese is spoken ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  countrylanguage.Language = \"Chinese\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] speak Chinese ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Chinese ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  countrylanguage.Language = \"Chinese\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Europe\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Europe\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Population = \"80000\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] Find the average life expectancy and total population for each continent [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Population = \"80000\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Region = \"Caribbean\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Name = \"Brazil\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Region = \"Central Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Region = \"Central Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Europe\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Europe\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Africa\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the different continents and the total popuation and average life expectancy corresponding to each [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.LifeExpectancy )  , country.Continent from city  where  country.Continent = \"Asia\"  group by country.Continent "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names and areas of countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name , country.SurfaceArea from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] where either English or Dutch is the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] have either English or Dutch as an official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  or  countrylanguage.Language = \"Dutch\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] with the 3 lowest populations ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] with the fewest people . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] are in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are names of countries [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] that were founded after 1950 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Asia or Europe . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\"  or  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] whose government is US Territory ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] which are considered US Territory . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( US Territory ), headofstate, capital, code2 ( US ) | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.GovernmentForm = \"US Territory\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] that use English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] speak both English and French ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] that speak both English and French . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"French\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] where both English and French are official languages ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\"  and  countrylanguage.Language = \"French\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] that do not use English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Asia ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names of the nations [/struct_sep0] [struct_sep1] in Asia . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Return the names of the 3 countries [/struct_sep0] [struct_sep1] with the lowest life expectancy . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.LifeExpectancy asc limit 3"
    },
    {
        "input": "[struct_sep0] Return the names of the 3 countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 3"
    },
    {
        "input": "[struct_sep0] Return the names of the 3 countries [/struct_sep0] [struct_sep1] with the smallest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Return the names of the 3 countries [/struct_sep0] [struct_sep1] that has the lowest population . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Return the names of the 3 countries [/struct_sep0] [struct_sep1] with the largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 3"
    },
    {
        "input": "[struct_sep0] Return the names of the 3 countries [/struct_sep0] [struct_sep1] that has the largest area . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 3"
    },
    {
        "input": "[struct_sep0] Return the names of the 3 countries [/struct_sep0] [struct_sep1] with the top 5 largest area ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] Return the names of the 3 countries [/struct_sep0] [struct_sep1] with the top 3 largest population ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] how many countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] that became independent after 1950 ? [/struct_sep1] | world _ 1 | city : id, name ( Independence ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.IndepYear > 1950 "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] have a Republic as their form of government ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] have governments that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in the Caribbean region ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] do the countires in the Caribbean cover together ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in Brazil ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in the region of Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in Central Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] that are Republic ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.GovernmentForm = \"Republic\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] are there in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] speak both English and Dutch ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English, Dutch ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  countrylanguage.Language = \"English\"  and  countrylanguage.Language = \"Dutch\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] where English is not the official language ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in which English is not the official language . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] that do not speak English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  @.@ not in country.Name  and  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in Europe ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Europe\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] in Africa ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] have a population of 80000 ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] Count the number of countries [/struct_sep0] [struct_sep1] have a population equal to 80000 . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select count ( country.* )  from city  where  country.Population = \"80000\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] with the lowest life expectancy . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] French as official languages . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  countrylanguage.Language = \"French\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] with the largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] whose government forms are not Republic ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.GovernmentForm != \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] do not have Republic for governments . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.GovernmentForm != \"Republic\" "
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] with the smallest population ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] with the largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] with the top 5 largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] with the top 3 largest population ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] with the 3 lowest populations ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] with the fewest people . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] What are the names of the countries [/struct_sep0] [struct_sep1] that are in the continent of Europe and [/struct_sep1] [struct_sep2] in Asia . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region ( Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region ( Central Africa ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] with the lowest life expectancy . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.LifeExpectancy asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] French as official languages . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( French ), isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  countrylanguage.Language = \"French\"  and  countrylanguage.IsOfficial = \"T\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] with the largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Asia ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Africa ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Africa, Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Africa\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] whose government forms are not Republic ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.GovernmentForm != \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] do not have Republic for governments . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform ( Republic ), headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.GovernmentForm != \"Republic\" "
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] with the smallest population ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.Population asc limit 1"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] with the largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.SurfaceArea desc limit 1"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] with the top 5 largest area ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.SurfaceArea desc limit 5"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] with the top 3 largest population ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.Population desc limit 3"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] with the 3 lowest populations ? [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] with the fewest people . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  order by country.Population asc limit 3"
    },
    {
        "input": "[struct_sep0] Give the names of countries [/struct_sep0] [struct_sep1] that are in Europe and [/struct_sep1] [struct_sep2] in Asia . [/struct_sep2] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( Europe, Asia ), region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select country.Name from city  where  country.Continent = \"Europe\"  and  country.Continent = \"Asia\" "
    },
    {
        "input": "[struct_sep0] What is the total population and average area of countries [/struct_sep0] [struct_sep1] in the continent of North America [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name ( Americana ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( North America ), region ( North America, Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.SurfaceArea )  from city  where  country.Continent = \"North America\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] What is the total population and average area of countries [/struct_sep0] [struct_sep1] in the continent of North America [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name ( Americana ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( North America ), region ( North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.SurfaceArea )  from city  where  country.Continent = \"North America\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] What is the total population and average area of countries [/struct_sep0] [struct_sep1] in the continent of North America [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name ( Americana ), countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( North America, Africa ), region ( Central Africa, North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.SurfaceArea )  from city  where  country.Continent = \"North America\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What is the total population and average area of countries [/struct_sep0] [struct_sep1] in the continent of North America [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name ( Americana ), countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( North America, Africa ), region ( Central Africa, North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.SurfaceArea )  from city  where  country.Continent = \"North America\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total population and average surface area corresponding to countries [/struct_sep0] [struct_sep1] in North America [/struct_sep1] [struct_sep2] in the Caribbean region ? [/struct_sep2] | world _ 1 | city : id, name ( Americana ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent ( North America ), region ( North America, Caribbean ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( Caribbean ), isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.SurfaceArea )  from city  where  country.Continent = \"North America\"  and  country.Region = \"Caribbean\" "
    },
    {
        "input": "[struct_sep0] Give the total population and average surface area corresponding to countries [/struct_sep0] [struct_sep1] in North America [/struct_sep1] [struct_sep2] in Brazil ? [/struct_sep2] | world _ 1 | city : id, name ( Americana ), countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Brazil ), continent ( North America ), region ( North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.SurfaceArea )  from city  where  country.Continent = \"North America\"  and  country.Name = \"Brazil\" "
    },
    {
        "input": "[struct_sep0] Give the total population and average surface area corresponding to countries [/struct_sep0] [struct_sep1] in North America [/struct_sep1] [struct_sep2] in the region of Central Africa ? [/struct_sep2] | world _ 1 | city : id, name ( Americana ), countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( North America, Africa ), region ( Central Africa, North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.SurfaceArea )  from city  where  country.Continent = \"North America\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] Give the total population and average surface area corresponding to countries [/struct_sep0] [struct_sep1] in North America [/struct_sep1] [struct_sep2] in Central Africa ? [/struct_sep2] | world _ 1 | city : id, name ( Americana ), countrycode, district ( Central ), population | sqlite _ sequence : name, seq | country : code, name, continent ( North America, Africa ), region ( Central Africa, North America ), surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select sum ( country.Population )  , avg ( country.SurfaceArea )  from city  where  country.Continent = \"North America\"  and  country.Region = \"Central Africa\" "
    },
    {
        "input": "[struct_sep0] What are the cities [/struct_sep0] [struct_sep1] that speaks English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select city.Name from city  where  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Return the names of cities [/struct_sep0] [struct_sep1] live in Gelderland district ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district ( Gelderland ), population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select city.Name from city  where  city.District = \"Gelderland\" "
    },
    {
        "input": "[struct_sep0] Return the names of cities [/struct_sep0] [struct_sep1] that speaks English ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language ( English ), isofficial, percentage",
        "gold_natsql": "select city.Name from city  where  countrylanguage.Language = \"English\" "
    },
    {
        "input": "[struct_sep0] Return the names of cities [/struct_sep0] [struct_sep1] have a population that is above the average population across all cities ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select city.Name from city  where  @.@ > avg ( city.Population )  "
    },
    {
        "input": "[struct_sep0] Which language [/struct_sep0] [struct_sep1] used in Aruba ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.Name = \"Aruba\" "
    },
    {
        "input": "[struct_sep0] Which language [/struct_sep0] [struct_sep1] are spoken in Aruba ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.Name = \"Aruba\" "
    },
    {
        "input": "[struct_sep0] Which language [/struct_sep0] [struct_sep1] used in the country the name of whose head of state is Beatrix . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] Give the language [/struct_sep0] [struct_sep1] used in Aruba ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.Name = \"Aruba\" "
    },
    {
        "input": "[struct_sep0] Give the language [/struct_sep0] [struct_sep1] are spoken in Aruba ? [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name ( Aruba ), continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname ( Aruba ), governmentform, headofstate, capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.Name = \"Aruba\" "
    },
    {
        "input": "[struct_sep0] Give the language [/struct_sep0] [struct_sep1] used in the country the name of whose head of state is Beatrix . [/struct_sep1] | world _ 1 | city : id, name, countrycode, district, population | sqlite _ sequence : name, seq | country : code, name, continent, region, surfacearea, indepyear, population, lifeexpectancy, gnp, gnpold, localname, governmentform, headofstate ( Beatrix ), capital, code2 | countrylanguage : countrycode, language, isofficial, percentage",
        "gold_natsql": "select countrylanguage.Language from city  where  country.HeadOfState = \"Beatrix\" "
    },
    {
        "input": "[struct_sep0] List the names of conductors [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] List the names of conductors [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] List the names of conductors [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] List the names of conductors [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] List the names of conductors [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] List the names of conductors [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] List the names of conductors [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] List the names of conductors [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What are the names of conductors , [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors , [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] Return the names of conductors [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] Return the names of conductors [/struct_sep0] [struct_sep1] ordered by age ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] Return the names of conductors [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] Return the names of conductors [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] Return the names of conductors [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] Return the names of conductors [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] Return the names of conductors [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] Return the names of conductors [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] Return the record companies of orchestras [/struct_sep0] [struct_sep1] that have no performance . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Record_Company from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] Return the record companies of orchestras [/struct_sep0] [struct_sep1] that do not have any performances ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Record_Company from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] Return the record companies of orchestras [/struct_sep0] [struct_sep1] whose record format is ' CD ' or ' DVD ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Record_Company from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] Return the record companies of orchestras [/struct_sep0] [struct_sep1] that have CD or DVD as their record format . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Record_Company from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] List names of conductors [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] List names of conductors [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] List names of conductors [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] List names of conductors [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] List names of conductors [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] List names of conductors [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] List names of conductors [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] List the name of the conductor [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] List the name of the conductor [/struct_sep0] [struct_sep1] ordered by age ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] List the name of the conductor [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] List the name of the conductor [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] List the name of the conductor [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] List the name of the conductor [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] List the name of the conductor [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] List the name of the conductor [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] Show the names of conductors [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] that have conducted more than one orchestras . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  count ( orchestra.* )  > 1  group by orchestra.Conductor_ID "
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] who have conducted at more than one orchestra ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  count ( orchestra.* )  > 1  group by orchestra.Conductor_ID "
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] Show the name of the conductor [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] that have conducted more than one orchestras . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  count ( orchestra.* )  > 1  group by orchestra.Conductor_ID "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] who have conducted at more than one orchestra ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  count ( orchestra.* )  > 1  group by orchestra.Conductor_ID "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] that has conducted orchestras [/struct_sep1] [struct_sep2] founded after 2008 . [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] What is the name of the conductor [/struct_sep0] [struct_sep1] who have conducted orchestras [/struct_sep1] [struct_sep2] founded after the year 2008 ? [/struct_sep2] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  orchestra.Year_of_Founded > 2008 "
    },
    {
        "input": "[struct_sep0] Please show the name of the conductor [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] Please show the name of the conductor [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] Please show the name of the conductor [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] Please show the name of the conductor [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] Please show the name of the conductor [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] Please show the name of the conductor [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] Please show the name of the conductor [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] in ascending order of age . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Age asc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] whose nationalities are not ' USA ' ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] that do not have the nationality ' USA ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality ( USA ), year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  where  conductor.Nationality != \"USA\" "
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] in descending order of years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] , sorted descending by the number of years they have worked ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] with the most years of work . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of conductors [/struct_sep0] [struct_sep1] who has worked the greatest number of years ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select conductor.Name from conductor  order by conductor.Year_of_Work desc limit 1"
    },
    {
        "input": "[struct_sep0] List the names of orchestras [/struct_sep0] [struct_sep1] , sorted descending by the years in which they were founded . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Orchestra from conductor  order by orchestra.Year_of_Founded desc"
    },
    {
        "input": "[struct_sep0] List the names of orchestras [/struct_sep0] [struct_sep1] whose record format is ' CD ' or ' DVD ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Orchestra from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] List the names of orchestras [/struct_sep0] [struct_sep1] that have CD or DVD as their record format . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Orchestra from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] What are the orchestras [/struct_sep0] [struct_sep1] , sorted descending by the years in which they were founded . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Orchestra from conductor  order by orchestra.Year_of_Founded desc"
    },
    {
        "input": "[struct_sep0] What are the orchestras [/struct_sep0] [struct_sep1] whose record format is ' CD ' or ' DVD ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Orchestra from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] What are the orchestras [/struct_sep0] [struct_sep1] that have CD or DVD as their record format . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Orchestra from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] Find the number of orchestras [/struct_sep0] [struct_sep1] that have no performance . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select count ( orchestra.* )  from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] Find the number of orchestras [/struct_sep0] [struct_sep1] that do not have any performances ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select count ( orchestra.* )  from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] Count the number of orchestras [/struct_sep0] [struct_sep1] that have no performance . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select count ( orchestra.* )  from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] Count the number of orchestras [/struct_sep0] [struct_sep1] that do not have any performances ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select count ( orchestra.* )  from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] Show the years in which orchestras [/struct_sep0] [struct_sep1] , sorted descending by the years in which they were founded . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  order by orchestra.Year_of_Founded desc"
    },
    {
        "input": "[struct_sep0] Show the years in which orchestras [/struct_sep0] [struct_sep1] that have no performance . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] Show the years in which orchestras [/struct_sep0] [struct_sep1] that do not have any performances ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] Show the years in which orchestras [/struct_sep0] [struct_sep1] whose record format is ' CD ' or ' DVD ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] Show the years in which orchestras [/struct_sep0] [struct_sep1] that have CD or DVD as their record format . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] What are years of founding for orchestras [/struct_sep0] [struct_sep1] , sorted descending by the years in which they were founded . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  order by orchestra.Year_of_Founded desc"
    },
    {
        "input": "[struct_sep0] What are years of founding for orchestras [/struct_sep0] [struct_sep1] that have no performance . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] What are years of founding for orchestras [/struct_sep0] [struct_sep1] that do not have any performances ? [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  where  @.@ not in performance.* "
    },
    {
        "input": "[struct_sep0] What are years of founding for orchestras [/struct_sep0] [struct_sep1] whose record format is ' CD ' or ' DVD ' . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] What are years of founding for orchestras [/struct_sep0] [struct_sep1] that have CD or DVD as their record format . [/struct_sep1] | orchestra | conductor : conductor _ id, name, age, nationality, year _ of _ work | orchestra : orchestra _ id, orchestra, conductor _ id, record _ company, year _ of _ founded, major _ record _ format ( DVD, CD ) | performance : performance _ id, orchestra _ id, type, date, official _ ratings _ (millions), weekly _ rank, share | show : show _ id, performance _ id, if _ first _ show, result, attendance",
        "gold_natsql": "select orchestra.Year_of_Founded from conductor  where  orchestra.Major_Record_Format = \"CD\"  or  orchestra.Major_Record_Format = \"DVD\" "
    },
    {
        "input": "[struct_sep0] Return the grade for the high schooler [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Return the grade for the high schooler [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Return the grade for the high schooler [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Return the grade for the high schooler [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show the names of all high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Show the names of all high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] What are the names of all high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] What are the names of all high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Show the ID of the high schooler [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show the ID of the high schooler [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show the ID of the high schooler [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show the ID of the high schooler [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] How many high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select count ( highschooler.* )  from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] How many high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select count ( highschooler.* )  from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Count the number of high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select count ( highschooler.* )  from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Count the number of high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select count ( highschooler.* )  from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Which grade [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Which grade [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Which grade [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Which grade [/struct_sep0] [struct_sep1] that have at least 4 students . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  count ( highschooler.* )  >= 4  group by highschooler.grade "
    },
    {
        "input": "[struct_sep0] Which grade [/struct_sep0] [struct_sep1] have 4 or more high schoolers ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  count ( highschooler.* )  >= 4  group by highschooler.grade "
    },
    {
        "input": "[struct_sep0] Return the grade [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Return the grade [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Return the grade [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Return the grade [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Return the grade [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Return the grade [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Return the grade [/struct_sep0] [struct_sep1] that have at least 4 students . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  count ( highschooler.* )  >= 4  group by highschooler.grade "
    },
    {
        "input": "[struct_sep0] Return the grade [/struct_sep0] [struct_sep1] have 4 or more high schoolers ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  count ( highschooler.* )  >= 4  group by highschooler.grade "
    },
    {
        "input": "[struct_sep0] Show me all grades [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Show me all grades [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show me all grades [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show me all grades [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Show me all grades [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show me all grades [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Which grades [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Which grades [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Which grades [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.grade from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] who have at least 3 friends . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  count ( friend.* )  >= 3  group by friend.student_id "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] who have 3 or more friends ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  count ( friend.* )  >= 3  group by friend.student_id "
    },
    {
        "input": "[struct_sep0] Return the name of the high school student [/struct_sep0] [struct_sep1] who do not have any friends . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  except_  @.@ is friend.* "
    },
    {
        "input": "[struct_sep0] Return the name of the high school student [/struct_sep0] [struct_sep1] who do not have friends ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  except_  @.@ is friend.* "
    },
    {
        "input": "[struct_sep0] Show the names of high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Show the names of high schoolers [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show the names of high schoolers [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show the names of high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Show the names of high schoolers [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show the names of high schoolers [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What are the names of high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] What are the names of high schoolers [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What are the names of high schoolers [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What are the names of high schoolers [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] What are the names of high schoolers [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What are the names of high schoolers [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show ids of all students [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Show ids of all students [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show ids of all students [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show ids of all students [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] Show ids of all students [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Show ids of all students [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What are the ids of high school students [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What are the ids of high school students [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What are the ids of high school students [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.ID from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] in grade 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] in grade 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] named Kyle . [/struct_sep1] | network _ 1 | highschooler : id, name ( Kyle ), grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.name = \"Kyle\" "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] are there in grade 9 or 10 ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] What is the name of the high schooler [/struct_sep0] [struct_sep1] in grades 9 or 10 . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  highschooler.grade = 9  or  highschooler.grade = 10 "
    },
    {
        "input": "[struct_sep0] Give the name of the student [/struct_sep0] [struct_sep1] who do not have any friends . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  except_  @.@ is friend.* "
    },
    {
        "input": "[struct_sep0] Give the name of the student [/struct_sep0] [struct_sep1] who do not have friends ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  except_  @.@ is friend.* "
    },
    {
        "input": "[struct_sep0] Give the name of the student [/struct_sep0] [struct_sep1] who have at least 2 likes . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  count ( likes.* )  >= 2  group by likes.student_id "
    },
    {
        "input": "[struct_sep0] Give the name of the student [/struct_sep0] [struct_sep1] who have 2 or more likes ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  count ( likes.* )  >= 2  group by likes.student_id "
    },
    {
        "input": "[struct_sep0] Show the names of students [/struct_sep0] [struct_sep1] who do not have any friends . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  except_  @.@ is friend.* "
    },
    {
        "input": "[struct_sep0] Show the names of students [/struct_sep0] [struct_sep1] who do not have friends ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  except_  @.@ is friend.* "
    },
    {
        "input": "[struct_sep0] What are the names of students [/struct_sep0] [struct_sep1] who do not have any friends . [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  except_  @.@ is friend.* "
    },
    {
        "input": "[struct_sep0] What are the names of students [/struct_sep0] [struct_sep1] who do not have friends ? [/struct_sep1] | network _ 1 | highschooler : id, name, grade | friend : student _ id, friend _ id | likes : student _ id, liked _ id",
        "gold_natsql": "select highschooler.name from highschooler  where  except_  @.@ is friend.* "
    },
    {
        "input": "[struct_sep0] What are the names of the dogs [/struct_sep0] [struct_sep1] have an age below the average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select dogs.name from breeds  where  @.@ < avg ( dogs.age )  "
    },
    {
        "input": "[struct_sep0] Which first names are used for professionals [/struct_sep0] [struct_sep1] who did not perform any treatment on dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.first_name from breeds  where  except_  @.@ is treatments.* "
    },
    {
        "input": "[struct_sep0] Which first names are used for professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.first_name from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] Which first names are used for professionals [/struct_sep0] [struct_sep1] who live in the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin . [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.first_name from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Which first names are used for professionals [/struct_sep0] [struct_sep1] living in either the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin ? [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.first_name from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Which first names are used for professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.first_name from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] Which first names are used for professionals [/struct_sep0] [struct_sep1] did not operate any treatment on dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.first_name from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Which first names are used for professionals [/struct_sep0] [struct_sep1] who have not treated any dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.first_name from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Give me the id , role and email of the professionals [/struct_sep0] [struct_sep1] or owners but are not used as dog names ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.email_address from breeds  where  except_  @.@ is dogs.* "
    },
    {
        "input": "[struct_sep0] Give me the id , role and email of the professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.email_address from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] Give me the id , role and email of the professionals [/struct_sep0] [struct_sep1] who live in the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin . [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.email_address from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Give me the id , role and email of the professionals [/struct_sep0] [struct_sep1] living in either the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin ? [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.email_address from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Give me the id , role and email of the professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.email_address from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] Give me the id , role and email of the professionals [/struct_sep0] [struct_sep1] did not operate any treatment on dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.email_address from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Give me the id , role and email of the professionals [/struct_sep0] [struct_sep1] who have not treated any dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.email_address from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Return the owner id , first name and last name of the owner [/struct_sep0] [struct_sep1] living in a state whose name contains the substring ' North ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.first_name , owners.last_name from breeds  where  owners.state like \"%North%\" "
    },
    {
        "input": "[struct_sep0] Return the owner id , first name and last name of the owner [/struct_sep0] [struct_sep1] temporarily do not have any dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.first_name , owners.last_name from breeds  where  @.@ not in dogs.* "
    },
    {
        "input": "[struct_sep0] Return the owner id , first name and last name of the owner [/struct_sep0] [struct_sep1] who do not own any dogs at this moment . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.first_name , owners.last_name from breeds  where  @.@ not in dogs.* "
    },
    {
        "input": "[struct_sep0] What are the id , role , and first name of the professionals [/struct_sep0] [struct_sep1] or owners but are not used as dog names ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.first_name from breeds  where  except_  @.@ is dogs.* "
    },
    {
        "input": "[struct_sep0] What are the id , role , and first name of the professionals [/struct_sep0] [struct_sep1] who did not perform any treatment on dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.first_name from breeds  where  except_  @.@ is treatments.* "
    },
    {
        "input": "[struct_sep0] What are the id , role , and first name of the professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.first_name from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] What are the id , role , and first name of the professionals [/struct_sep0] [struct_sep1] who live in the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin . [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.first_name from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] What are the id , role , and first name of the professionals [/struct_sep0] [struct_sep1] living in either the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin ? [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.first_name from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] What are the id , role , and first name of the professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.first_name from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] What are the id , role , and first name of the professionals [/struct_sep0] [struct_sep1] did not operate any treatment on dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.first_name from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] What are the id , role , and first name of the professionals [/struct_sep0] [struct_sep1] who have not treated any dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.role_code , professionals.first_name from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Tell me the owner id and last name of the owner [/struct_sep0] [struct_sep1] living in a state whose name contains the substring ' North ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.last_name from breeds  where  owners.state like \"%North%\" "
    },
    {
        "input": "[struct_sep0] Tell me the owner id and last name of the owner [/struct_sep0] [struct_sep1] temporarily do not have any dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.last_name from breeds  where  @.@ not in dogs.* "
    },
    {
        "input": "[struct_sep0] Tell me the owner id and last name of the owner [/struct_sep0] [struct_sep1] who do not own any dogs at this moment . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.last_name from breeds  where  @.@ not in dogs.* "
    },
    {
        "input": "[struct_sep0] Find the owner id and zip code of the owner [/struct_sep0] [struct_sep1] living in a state whose name contains the substring ' North ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.zip_code from breeds  where  owners.state like \"%North%\" "
    },
    {
        "input": "[struct_sep0] Find the owner id and zip code of the owner [/struct_sep0] [struct_sep1] temporarily do not have any dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.zip_code from breeds  where  @.@ not in dogs.* "
    },
    {
        "input": "[struct_sep0] Find the owner id and zip code of the owner [/struct_sep0] [struct_sep1] who do not own any dogs at this moment . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.owner_id , owners.zip_code from breeds  where  @.@ not in dogs.* "
    },
    {
        "input": "[struct_sep0] Find the id and cell phone of the professionals [/struct_sep0] [struct_sep1] or owners but are not used as dog names ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.cell_number from breeds  where  except_  @.@ is dogs.* "
    },
    {
        "input": "[struct_sep0] Find the id and cell phone of the professionals [/struct_sep0] [struct_sep1] who did not perform any treatment on dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.cell_number from breeds  where  except_  @.@ is treatments.* "
    },
    {
        "input": "[struct_sep0] Find the id and cell phone of the professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.cell_number from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] Find the id and cell phone of the professionals [/struct_sep0] [struct_sep1] who live in the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin . [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.cell_number from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Find the id and cell phone of the professionals [/struct_sep0] [struct_sep1] living in either the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin ? [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.cell_number from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Find the id and cell phone of the professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.cell_number from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] Find the id and cell phone of the professionals [/struct_sep0] [struct_sep1] did not operate any treatment on dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.cell_number from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Find the id and cell phone of the professionals [/struct_sep0] [struct_sep1] who have not treated any dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.professional_id , professionals.cell_number from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] What are the first name and last name of the professionals [/struct_sep0] [struct_sep1] or owners but are not used as dog names ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select  distinct professionals.first_name , professionals.last_name from breeds  where  except_  @.@ is dogs.* "
    },
    {
        "input": "[struct_sep0] What are the first name and last name of the professionals [/struct_sep0] [struct_sep1] who did not perform any treatment on dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select  distinct professionals.first_name , professionals.last_name from breeds  where  except_  @.@ is treatments.* "
    },
    {
        "input": "[struct_sep0] What are the first name and last name of the professionals [/struct_sep0] [struct_sep1] who live in the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin . [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select  distinct professionals.first_name , professionals.last_name from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] What are the first name and last name of the professionals [/struct_sep0] [struct_sep1] living in either the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin ? [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select  distinct professionals.first_name , professionals.last_name from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] What are the first name and last name of the professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select  distinct professionals.first_name , professionals.last_name from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] What are the first name and last name of the professionals [/struct_sep0] [struct_sep1] did not operate any treatment on dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select  distinct professionals.first_name , professionals.last_name from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] What are the first name and last name of the professionals [/struct_sep0] [struct_sep1] who have not treated any dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select  distinct professionals.first_name , professionals.last_name from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] List the emails of the professionals [/struct_sep0] [struct_sep1] or owners but are not used as dog names ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  except_  @.@ is dogs.* "
    },
    {
        "input": "[struct_sep0] List the emails of the professionals [/struct_sep0] [struct_sep1] who did not perform any treatment on dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  except_  @.@ is treatments.* "
    },
    {
        "input": "[struct_sep0] List the emails of the professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] List the emails of the professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] List the emails of the professionals [/struct_sep0] [struct_sep1] did not operate any treatment on dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] List the emails of the professionals [/struct_sep0] [struct_sep1] who have not treated any dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] What are the emails of the professionals [/struct_sep0] [struct_sep1] or owners but are not used as dog names ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  except_  @.@ is dogs.* "
    },
    {
        "input": "[struct_sep0] What are the emails of the professionals [/struct_sep0] [struct_sep1] who did not perform any treatment on dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  except_  @.@ is treatments.* "
    },
    {
        "input": "[struct_sep0] What are the emails of the professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] What are the emails of the professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] What are the emails of the professionals [/struct_sep0] [struct_sep1] did not operate any treatment on dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] What are the emails of the professionals [/struct_sep0] [struct_sep1] who have not treated any dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.email_address from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Find the role , street , city and state of the professionals [/struct_sep0] [struct_sep1] or owners but are not used as dog names ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.role_code , professionals.street , professionals.city , professionals.state from breeds  where  except_  @.@ is dogs.* "
    },
    {
        "input": "[struct_sep0] Find the role , street , city and state of the professionals [/struct_sep0] [struct_sep1] who did not perform any treatment on dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.role_code , professionals.street , professionals.city , professionals.state from breeds  where  except_  @.@ is treatments.* "
    },
    {
        "input": "[struct_sep0] Find the role , street , city and state of the professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.role_code , professionals.street , professionals.city , professionals.state from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] Find the role , street , city and state of the professionals [/struct_sep0] [struct_sep1] who live in the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin . [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.role_code , professionals.street , professionals.city , professionals.state from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Find the role , street , city and state of the professionals [/struct_sep0] [struct_sep1] living in either the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin ? [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.role_code , professionals.street , professionals.city , professionals.state from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Find the role , street , city and state of the professionals [/struct_sep0] [struct_sep1] did not operate any treatment on dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.role_code , professionals.street , professionals.city , professionals.state from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Find the role , street , city and state of the professionals [/struct_sep0] [struct_sep1] who have not treated any dogs . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select professionals.role_code , professionals.street , professionals.city , professionals.state from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] Return the first name , last name and email of the owners [/struct_sep0] [struct_sep1] temporarily do not have any dogs ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.first_name , owners.last_name , owners.email_address from breeds  where  @.@ not in dogs.* "
    },
    {
        "input": "[struct_sep0] Return the first name , last name and email of the owners [/struct_sep0] [struct_sep1] who do not own any dogs at this moment . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select owners.first_name , owners.last_name , owners.email_address from breeds  where  @.@ not in dogs.* "
    },
    {
        "input": "[struct_sep0] How many dogs [/struct_sep0] [struct_sep1] for which the owner has not spend more than 1000 for treatment ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( dogs.* )  from breeds  where  @.@ not in treatments.*  and  sum ( treatments.cost_of_treatment )  > 1000 "
    },
    {
        "input": "[struct_sep0] How many dogs [/struct_sep0] [struct_sep1] have not gone through any treatment ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( dogs.* )  from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] How many dogs [/struct_sep0] [struct_sep1] that have not received any treatment . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( dogs.* )  from breeds  where  @.@ not in treatments.* "
    },
    {
        "input": "[struct_sep0] How many dogs [/struct_sep0] [struct_sep1] have an age below the average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( dogs.* )  from breeds  where  @.@ < avg ( dogs.age )  "
    },
    {
        "input": "[struct_sep0] Tell me the number of dogs [/struct_sep0] [struct_sep1] have an age below the average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( dogs.* )  from breeds  where  @.@ < avg ( dogs.age )  "
    },
    {
        "input": "[struct_sep0] How many owners [/struct_sep0] [struct_sep1] living in a state whose name contains the substring ' North ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( owners.* )  from breeds  where  owners.state like \"%North%\" "
    },
    {
        "input": "[struct_sep0] Find the number of owners [/struct_sep0] [struct_sep1] living in a state whose name contains the substring ' North ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( owners.* )  from breeds  where  owners.state like \"%North%\" "
    },
    {
        "input": "[struct_sep0] How many professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( professionals.* )  from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] How many professionals [/struct_sep0] [struct_sep1] who live in the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin . [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( professionals.* )  from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] How many professionals [/struct_sep0] [struct_sep1] living in either the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin ? [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( professionals.* )  from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] How many professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( professionals.* )  from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] Find the number of professionals [/struct_sep0] [struct_sep1] who have done treatment with cost below average ? [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( professionals.* )  from breeds  where  @.@ < avg ( treatments.cost_of_treatment )  "
    },
    {
        "input": "[struct_sep0] Find the number of professionals [/struct_sep0] [struct_sep1] who live in the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin . [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( professionals.* )  from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Find the number of professionals [/struct_sep0] [struct_sep1] living in either the state of Hawaii or [/struct_sep1] [struct_sep2] the state of Wisconsin ? [/struct_sep2] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state ( Wisconsin ), zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state ( Wisconsin, Hawaii ), zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( professionals.* )  from breeds  where  professionals.state = \"Hawaii\"  or  professionals.state = \"Wisconsin\" "
    },
    {
        "input": "[struct_sep0] Find the number of professionals [/struct_sep0] [struct_sep1] living in a city that contains the substring ' West ' . [/struct_sep1] | dog _ kennels | breeds : breed _ code, breed _ name | charges : charge _ id, charge _ type, charge _ amount | sizes : size _ code, size _ description | treatment _ types : treatment _ type _ code, treatment _ type _ description | owners : owner _ id, first _ name, last _ name, street, city, state, zip _ code, email _ address, home _ phone, cell _ number | dogs : dog _ id, owner _ id, abandoned _ yn, breed _ code, size _ code, name, age, date _ of _ birth, gender, weight, date _ arrived, date _ adopted, date _ departed | professionals : professional _ id, role _ code, first _ name, street, city, state, zip _ code, last _ name, email _ address, home _ phone, cell _ number | treatments : treatment _ id, dog _ id, professional _ id, treatment _ type _ code, date _ of _ treatment, cost _ of _ treatment",
        "gold_natsql": "select count ( professionals.* )  from breeds  where  professionals.city like \"%West%\" "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What are the names of singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] Show the name of singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What is the name of the singer [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] Show distinct names of singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] what are the different names of the singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select  distinct singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] Show the names of singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] What are the names of the singers [/struct_sep0] [struct_sep1] that do not have any song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  @.@ not in song.* "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] ordered by ascending net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] whose citizenship is not ' France ' . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] who are not France citizens ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship ( France ) | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Citizenship != \"France\" "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] whose birth year is either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] whose birth years are either 1948 or 1949 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  singer.Birth_Year = 1948  or  singer.Birth_Year = 1949 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] who is worth the most ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have songs with sales more than 300000 . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have sales more than 300000 ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  song.Sales > 300000 "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have more than one song . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] List the name of singers [/struct_sep0] [struct_sep1] that have more than one songs ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  where  count ( song.* )  > 1  group by singer.Name "
    },
    {
        "input": "[struct_sep0] What is the sname of every sing [/struct_sep0] [struct_sep1] in ascending order of net worth . [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What is the sname of every sing [/struct_sep0] [struct_sep1] with the largest net worth ? [/struct_sep1] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Name from singer  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] Show the citizenship shared by singers [/struct_sep0] [struct_sep1] with birth year before 1945 and [/struct_sep1] [struct_sep2] in ascending order of net worth . [/struct_sep2] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Citizenship from singer  where  singer.Birth_Year < 1945  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] Show the citizenship shared by singers [/struct_sep0] [struct_sep1] with birth year before 1945 and [/struct_sep1] [struct_sep2] with the largest net worth ? [/struct_sep2] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Citizenship from singer  where  singer.Birth_Year < 1945  order by singer.Net_Worth_Millions desc limit 1"
    },
    {
        "input": "[struct_sep0] What are the citizenships [/struct_sep0] [struct_sep1] that are shared by singers with a birth year before 1945 [/struct_sep1] [struct_sep2] in ascending order of net worth . [/struct_sep2] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Citizenship from singer  where  singer.Birth_Year < 1945  order by singer.Net_Worth_Millions asc"
    },
    {
        "input": "[struct_sep0] What are the citizenships [/struct_sep0] [struct_sep1] that are shared by singers with a birth year before 1945 [/struct_sep1] [struct_sep2] with the largest net worth ? [/struct_sep2] | singer | singer : singer _ id, name, birth _ year, net _ worth _ millions, citizenship | song : song _ id, title, singer _ id, sales, highest _ position",
        "gold_natsql": "select singer.Citizenship from singer  where  singer.Birth_Year < 1945  order by singer.Net_Worth_Millions desc limit 1"
    }
]